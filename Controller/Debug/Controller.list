
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f18  08005f18  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f20  08005f20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f20  08005f20  00015f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f24  08005f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  20000074  08005f9c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08005f9c  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018990  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db1  00000000  00000000  00038a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0003b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003cb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c3d3  00000000  00000000  0003dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001634c  00000000  00000000  0006a123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113a4e  00000000  00000000  0008046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193ebd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005220  00000000  00000000  00193f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005e90 	.word	0x08005e90

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	08005e90 	.word	0x08005e90

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <LCD_reset>:
    HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
    0                            // END OF COMMAND LIST
  };

void LCD_reset()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	480d      	ldr	r0, [pc, #52]	; (8000540 <LCD_reset+0x40>)
 800050c:	f002 fa30 	bl	8002970 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000510:	2064      	movs	r0, #100	; 0x64
 8000512:	f000 fe53 	bl	80011bc <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <LCD_reset+0x40>)
 800051e:	f002 fa27 	bl	8002970 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000522:	2064      	movs	r0, #100	; 0x64
 8000524:	f000 fe4a 	bl	80011bc <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052e:	4804      	ldr	r0, [pc, #16]	; (8000540 <LCD_reset+0x40>)
 8000530:	f002 fa1e 	bl	8002970 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000534:	20c8      	movs	r0, #200	; 0xc8
 8000536:	f000 fe41 	bl	80011bc <HAL_Delay>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	48000c00 	.word	0x48000c00

08000544 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <LCD_writeCommand+0x40>)
 8000558:	f002 fa0a 	bl	8002970 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(spi, &cmd, 1, 100);
 800055c:	1cf9      	adds	r1, r7, #3
 800055e:	2364      	movs	r3, #100	; 0x64
 8000560:	2201      	movs	r2, #1
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f004 f8db 	bl	800471e <HAL_SPI_Transmit>
 8000568:	4603      	mov	r3, r0
 800056a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <LCD_writeCommand+0x40>)
 8000574:	f002 f9fc 	bl	8002970 <HAL_GPIO_WritePin>
	return result;
 8000578:	7bfb      	ldrb	r3, [r7, #15]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48001400 	.word	0x48001400

08000588 <LCD_startWrite>:

void LCD_startWrite()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <LCD_startWrite+0x14>)
 8000594:	f002 f9ec 	bl	8002970 <HAL_GPIO_WritePin>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	48001400 	.word	0x48001400

080005a0 <LCD_endWrite>:

void LCD_endWrite()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <LCD_endWrite+0x14>)
 80005ac:	f002 f9e0 	bl	8002970 <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	48001400 	.word	0x48001400

080005b8 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	LCD_reset();
 80005c0:	f7ff ff9e 	bl	8000500 <LCD_reset>
	uint8_t *addr = init;
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <LCD_begin+0xac>)
 80005c6:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 80005c8:	e03f      	b.n	800064a <LCD_begin+0x92>
	{
		if (cmd != 0xFF) // '255' is ignored
 80005ca:	7abb      	ldrb	r3, [r7, #10]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d00f      	beq.n	80005f0 <LCD_begin+0x38>
		{
			LCD_startWrite();
 80005d0:	f7ff ffda 	bl	8000588 <LCD_startWrite>
			result = LCD_writeCommand(spi, cmd);
 80005d4:	7abb      	ldrb	r3, [r7, #10]
 80005d6:	4619      	mov	r1, r3
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ffb3 	bl	8000544 <LCD_writeCommand>
 80005de:	4603      	mov	r3, r0
 80005e0:	727b      	strb	r3, [r7, #9]
			LCD_endWrite();
 80005e2:	f7ff ffdd 	bl	80005a0 <LCD_endWrite>
			if (result != HAL_OK) return 0;
 80005e6:	7a7b      	ldrb	r3, [r7, #9]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <LCD_begin+0x38>
 80005ec:	2300      	movs	r3, #0
 80005ee:	e035      	b.n	800065c <LCD_begin+0xa4>
		}
		x = *(addr++);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60fa      	str	r2, [r7, #12]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 80005fa:	7a3b      	ldrb	r3, [r7, #8]
 80005fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000600:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000602:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000606:	2b00      	cmp	r3, #0
 8000608:	da1a      	bge.n	8000640 <LCD_begin+0x88>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 800060a:	7afa      	ldrb	r2, [r7, #11]
 800060c:	4613      	mov	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fdd2 	bl	80011bc <HAL_Delay>
 8000618:	e017      	b.n	800064a <LCD_begin+0x92>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				LCD_startWrite();
 800061a:	f7ff ffb5 	bl	8000588 <LCD_startWrite>
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 800061e:	68f9      	ldr	r1, [r7, #12]
 8000620:	1c4b      	adds	r3, r1, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	2201      	movs	r2, #1
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f004 f878 	bl	800471e <HAL_SPI_Transmit>
 800062e:	4603      	mov	r3, r0
 8000630:	727b      	strb	r3, [r7, #9]
				LCD_endWrite();
 8000632:	f7ff ffb5 	bl	80005a0 <LCD_endWrite>
				if (result != HAL_OK) return 0;
 8000636:	7a7b      	ldrb	r3, [r7, #9]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <LCD_begin+0x88>
 800063c:	2300      	movs	r3, #0
 800063e:	e00d      	b.n	800065c <LCD_begin+0xa4>
			while (numArgs--)
 8000640:	7afb      	ldrb	r3, [r7, #11]
 8000642:	1e5a      	subs	r2, r3, #1
 8000644:	72fa      	strb	r2, [r7, #11]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1e7      	bne.n	800061a <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	60fa      	str	r2, [r7, #12]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	72bb      	strb	r3, [r7, #10]
 8000654:	7abb      	ldrb	r3, [r7, #10]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1b7      	bne.n	80005ca <LCD_begin+0x12>
			}
		}
	}
	return 1;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000000 	.word	0x20000000

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 fd30 	bl	80010d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f817 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 f9cf 	bl	8000a18 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800067a:	f000 f8cb 	bl	8000814 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800067e:	f000 f917 	bl	80008b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000682:	f000 f99f 	bl	80009c4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000686:	f000 f861 	bl	800074c <MX_ADC1_Init>
  MX_SPI1_Init();
 800068a:	f000 f95d 	bl	8000948 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f000 fd93 	bl	80011bc <HAL_Delay>
  int result = LCD_begin();
 8000696:	f7ff ff8f 	bl	80005b8 <LCD_begin>
 800069a:	6078      	str	r0, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		result += 1;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	e7fb      	b.n	800069c <main+0x34>

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b096      	sub	sp, #88	; 0x58
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2244      	movs	r2, #68	; 0x44
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fbe4 	bl	8005e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006c6:	2000      	movs	r0, #0
 80006c8:	f002 fad2 	bl	8002c70 <HAL_PWREx_ControlVoltageScaling>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006d2:	f000 fa7f 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006d6:	2322      	movs	r3, #34	; 0x22
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80006f4:	231e      	movs	r3, #30
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fb75 	bl	8002df8 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000714:	f000 fa5e 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2303      	movs	r3, #3
 800071e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	2105      	movs	r1, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f002 ff7a 	bl	800362c <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800073e:	f000 fa49 	bl	8000bd4 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	; 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_ADC1_Init+0xbc>)
 8000764:	4a29      	ldr	r2, [pc, #164]	; (800080c <MX_ADC1_Init+0xc0>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_ADC1_Init+0xbc>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_ADC1_Init+0xbc>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_ADC1_Init+0xbc>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_ADC1_Init+0xbc>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_ADC1_Init+0xbc>)
 8000782:	2204      	movs	r2, #4
 8000784:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_ADC1_Init+0xbc>)
 8000788:	2200      	movs	r2, #0
 800078a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_ADC1_Init+0xbc>)
 800078e:	2200      	movs	r2, #0
 8000790:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_ADC1_Init+0xbc>)
 8000794:	2201      	movs	r2, #1
 8000796:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_ADC1_Init+0xbc>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_ADC1_Init+0xbc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_ADC1_Init+0xbc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_ADC1_Init+0xbc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_ADC1_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_ADC1_Init+0xbc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <MX_ADC1_Init+0xbc>)
 80007c4:	f000 fee4 	bl	8001590 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007ce:	f000 fa01 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_ADC1_Init+0xc4>)
 80007d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d6:	2306      	movs	r3, #6
 80007d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007de:	237f      	movs	r3, #127	; 0x7f
 80007e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e2:	2304      	movs	r3, #4
 80007e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_ADC1_Init+0xbc>)
 80007f0:	f001 f9ec 	bl	8001bcc <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007fa:	f000 f9eb 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000090 	.word	0x20000090
 800080c:	50040000 	.word	0x50040000
 8000810:	04300002 	.word	0x04300002

08000814 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800081a:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_LPUART1_UART_Init+0x94>)
 800081c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <MX_LPUART1_UART_Init+0x98>)
 8000822:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800082a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800085c:	4811      	ldr	r0, [pc, #68]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800085e:	f004 fa31 	bl	8004cc4 <HAL_UART_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000868:	f000 f9b4 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000870:	f004 ff62 	bl	8005738 <HAL_UARTEx_SetTxFifoThreshold>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800087a:	f000 f9ab 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4808      	ldr	r0, [pc, #32]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000882:	f004 ff97 	bl	80057b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 f9a2 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000892:	f004 ff18 	bl	80056c6 <HAL_UARTEx_DisableFifoMode>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f99a 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000f8 	.word	0x200000f8
 80008a8:	40008000 	.word	0x40008000
 80008ac:	00033324 	.word	0x00033324

080008b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <MX_USART3_UART_Init+0x94>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008fa:	f004 f9e3 	bl	8004cc4 <HAL_UART_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000904:	f000 f966 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <MX_USART3_UART_Init+0x90>)
 800090c:	f004 ff14 	bl	8005738 <HAL_UARTEx_SetTxFifoThreshold>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000916:	f000 f95d 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <MX_USART3_UART_Init+0x90>)
 800091e:	f004 ff49 	bl	80057b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000928:	f000 f954 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_USART3_UART_Init+0x90>)
 800092e:	f004 feca 	bl	80056c6 <HAL_UARTEx_DisableFifoMode>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000938:	f000 f94c 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000188 	.word	0x20000188
 8000944:	40004800 	.word	0x40004800

08000948 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_SPI1_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <MX_SPI1_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_SPI1_Init+0x74>)
 8000954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI1_Init+0x74>)
 8000962:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000966:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI1_Init+0x74>)
 8000976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI1_Init+0x74>)
 800097e:	2228      	movs	r2, #40	; 0x28
 8000980:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_SPI1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI1_Init+0x74>)
 8000996:	2207      	movs	r2, #7
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_SPI1_Init+0x74>)
 80009a8:	f003 fe16 	bl	80045d8 <HAL_SPI_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f000 f90f 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000218 	.word	0x20000218
 80009c0:	40013000 	.word	0x40013000

080009c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009d2:	2206      	movs	r2, #6
 80009d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009d8:	2202      	movs	r2, #2
 80009da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009de:	2201      	movs	r2, #1
 80009e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a02:	f001 ffcd 	bl	80029a0 <HAL_PCD_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000a0c:	f000 f8e2 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000027c 	.word	0x2000027c

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b63      	ldr	r3, [pc, #396]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a62      	ldr	r2, [pc, #392]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	4b5d      	ldr	r3, [pc, #372]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a5c      	ldr	r2, [pc, #368]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b5a      	ldr	r3, [pc, #360]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a56      	ldr	r2, [pc, #344]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b54      	ldr	r3, [pc, #336]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	4b51      	ldr	r3, [pc, #324]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a50      	ldr	r2, [pc, #320]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0320 	and.w	r3, r3, #32
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a4a      	ldr	r2, [pc, #296]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b48      	ldr	r3, [pc, #288]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4b45      	ldr	r3, [pc, #276]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a44      	ldr	r2, [pc, #272]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	4b3f      	ldr	r3, [pc, #252]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a3e      	ldr	r2, [pc, #248]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <MX_GPIO_Init+0x1a4>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000ad6:	f002 f97f 	bl	8002dd8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ae0:	4837      	ldr	r0, [pc, #220]	; (8000bc0 <MX_GPIO_Init+0x1a8>)
 8000ae2:	f001 ff45 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000aec:	4835      	ldr	r0, [pc, #212]	; (8000bc4 <MX_GPIO_Init+0x1ac>)
 8000aee:	f001 ff3f 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af8:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <MX_GPIO_Init+0x1b0>)
 8000afa:	f001 ff39 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	4832      	ldr	r0, [pc, #200]	; (8000bcc <MX_GPIO_Init+0x1b4>)
 8000b04:	f001 ff34 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	482c      	ldr	r0, [pc, #176]	; (8000bd0 <MX_GPIO_Init+0x1b8>)
 8000b20:	f001 fd94 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b24:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4820      	ldr	r0, [pc, #128]	; (8000bc0 <MX_GPIO_Init+0x1a8>)
 8000b3e:	f001 fd85 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b42:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <MX_GPIO_Init+0x1ac>)
 8000b5c:	f001 fd76 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <MX_GPIO_Init+0x1b0>)
 8000b7a:	f001 fd67 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b7e:	2320      	movs	r3, #32
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_GPIO_Init+0x1b4>)
 8000b96:	f001 fd59 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <MX_GPIO_Init+0x1b4>)
 8000bae:	f001 fd4d 	bl	800264c <HAL_GPIO_Init>

}
 8000bb2:	bf00      	nop
 8000bb4:	3730      	adds	r7, #48	; 0x30
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48001400 	.word	0x48001400
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48000c00 	.word	0x48000c00
 8000bcc:	48001800 	.word	0x48001800
 8000bd0:	48000800 	.word	0x48000800

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0ae      	sub	sp, #184	; 0xb8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2294      	movs	r2, #148	; 0x94
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f005 f919 	bl	8005e80 <memset>
  if(hadc->Instance==ADC1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a2b      	ldr	r2, [pc, #172]	; (8000d00 <HAL_ADC_MspInit+0xd8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d14e      	bne.n	8000cf6 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c66:	2302      	movs	r3, #2
 8000c68:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000c6e:	230c      	movs	r3, #12
 8000c70:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 ff8d 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c94:	f7ff ff9e 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <HAL_ADC_MspInit+0xdc>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_ADC_MspInit+0xdc>)
 8000c9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_ADC_MspInit+0xdc>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_ADC_MspInit+0xdc>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <HAL_ADC_MspInit+0xdc>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_ADC_MspInit+0xdc>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cce:	230b      	movs	r3, #11
 8000cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <HAL_ADC_MspInit+0xe0>)
 8000ce2:	f001 fcb3 	bl	800264c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2012      	movs	r0, #18
 8000cec:	f001 fc77 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000cf0:	2012      	movs	r0, #18
 8000cf2:	f001 fc90 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	37b8      	adds	r7, #184	; 0xb8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	50040000 	.word	0x50040000
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000800 	.word	0x48000800

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0b0      	sub	sp, #192	; 0xc0
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	f107 0318 	add.w	r3, r7, #24
 8000d28:	2294      	movs	r2, #148	; 0x94
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 f8a7 	bl	8005e80 <memset>
  if(huart->Instance==LPUART1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a43      	ldr	r2, [pc, #268]	; (8000e44 <HAL_UART_MspInit+0x138>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d13e      	bne.n	8000dba <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 ff2d 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff ff3e 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d58:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d5c:	4a3a      	ldr	r2, [pc, #232]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d64:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	4a34      	ldr	r2, [pc, #208]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7c:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000d88:	f002 f826 	bl	8002dd8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d8c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000da6:	2308      	movs	r3, #8
 8000da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000db0:	4619      	mov	r1, r3
 8000db2:	4826      	ldr	r0, [pc, #152]	; (8000e4c <HAL_UART_MspInit+0x140>)
 8000db4:	f001 fc4a 	bl	800264c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db8:	e040      	b.n	8000e3c <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <HAL_UART_MspInit+0x144>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d13b      	bne.n	8000e3c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fee9 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000ddc:	f7ff fefa 	bl	8000bd4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dea:	6593      	str	r3, [r2, #88]	; 0x58
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_UART_MspInit+0x13c>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e34:	4619      	mov	r1, r3
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <HAL_UART_MspInit+0x148>)
 8000e38:	f001 fc08 	bl	800264c <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	37c0      	adds	r7, #192	; 0xc0
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40008000 	.word	0x40008000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48001800 	.word	0x48001800
 8000e50:	40004800 	.word	0x40004800
 8000e54:	48000c00 	.word	0x48000c00

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_SPI_MspInit+0x7c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d128      	bne.n	8000ecc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e84:	6613      	str	r3, [r2, #96]	; 0x60
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eaa:	23e0      	movs	r3, #224	; 0xe0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f001 fbc0 	bl	800264c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40013000 	.word	0x40013000
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0b0      	sub	sp, #192	; 0xc0
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	2294      	movs	r2, #148	; 0x94
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f004 ffbf 	bl	8005e80 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f0a:	d16c      	bne.n	8000fe6 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 fe43 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f28:	f7ff fe54 	bl	8000bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f30:	4a2f      	ldr	r2, [pc, #188]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f38:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f44:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f5e:	230a      	movs	r3, #10
 8000f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f001 fb6d 	bl	800264c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f001 fb5c 	bl	800264c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000f9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d114      	bne.n	8000fe2 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000fd0:	f001 fef2 	bl	8002db8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd8:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <HAL_PCD_MspInit+0x114>)
 8000fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fe0:	e001      	b.n	8000fe6 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000fe2:	f001 fee9 	bl	8002db8 <HAL_PWREx_EnableVddUSB>
}
 8000fe6:	bf00      	nop
 8000fe8:	37c0      	adds	r7, #192	; 0xc0
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 f89c 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <ADC1_IRQHandler+0x10>)
 800104e:	f000 fbeb 	bl	8001828 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000090 	.word	0x20000090

0800105c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001084:	f7ff ffea 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	; (80010cc <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f004 fec3 	bl	8005e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b2:	f7ff fad9 	bl	8000668 <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010c4:	08005f28 	.word	0x08005f28
  ldr r2, =_sbss
 80010c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010cc:	2000078c 	.word	0x2000078c

080010d0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <CAN1_RX0_IRQHandler>

080010d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f001 fa73 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f80e 	bl	8001104 <HAL_InitTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e001      	b.n	80010f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f4:	f7ff fd74 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_InitTick+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_InitTick+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fa7f 	bl	8002632 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d809      	bhi.n	8001154 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001148:	f001 fa49 	bl	80025de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_InitTick+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e007      	b.n	8001164 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e004      	b.n	8001164 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e001      	b.n	8001164 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000070 	.word	0x20000070
 8001174:	20000068 	.word	0x20000068
 8001178:	2000006c 	.word	0x2000006c

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000070 	.word	0x20000070
 80011a0:	20000788 	.word	0x20000788

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000788 	.word	0x20000788

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000070 	.word	0x20000070

08001204 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3360      	adds	r3, #96	; 0x60
 800127e:	461a      	mov	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <LL_ADC_SetOffset+0x44>)
 800128e:	4013      	ands	r3, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	4313      	orrs	r3, r2
 800129c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	03fff000 	.word	0x03fff000

080012b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3360      	adds	r3, #96	; 0x60
 80012c2:	461a      	mov	r2, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3360      	adds	r3, #96	; 0x60
 80012f0:	461a      	mov	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	431a      	orrs	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	615a      	str	r2, [r3, #20]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001362:	b480      	push	{r7}
 8001364:	b087      	sub	sp, #28
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3330      	adds	r3, #48	; 0x30
 8001372:	461a      	mov	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	4413      	add	r3, r2
 8001380:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	211f      	movs	r1, #31
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	401a      	ands	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	0e9b      	lsrs	r3, r3, #26
 800139a:	f003 011f 	and.w	r1, r3, #31
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	431a      	orrs	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3314      	adds	r3, #20
 80013f0:	461a      	mov	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	0e5b      	lsrs	r3, r3, #25
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	4413      	add	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	0d1b      	lsrs	r3, r3, #20
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	2107      	movs	r1, #7
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	401a      	ands	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	0d1b      	lsrs	r3, r3, #20
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001450:	43db      	mvns	r3, r3
 8001452:	401a      	ands	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0318 	and.w	r3, r3, #24
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <LL_ADC_SetChannelSingleDiff+0x44>)
 800145c:	40d9      	lsrs	r1, r3
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	400b      	ands	r3, r1
 8001462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001466:	431a      	orrs	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	0007ffff 	.word	0x0007ffff

08001480 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6093      	str	r3, [r2, #8]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014b8:	d101      	bne.n	80014be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001508:	d101      	bne.n	800150e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <LL_ADC_IsEnabled+0x18>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <LL_ADC_IsEnabled+0x1a>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b04      	cmp	r3, #4
 8001554:	d101      	bne.n	800155a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b08      	cmp	r3, #8
 800157a:	d101      	bne.n	8001580 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e12f      	b.n	800180a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff fb35 	bl	8000c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff67 	bl	80014a4 <LL_ADC_IsDeepPowerDownEnabled>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff4d 	bl	8001480 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff82 	bl	80014f4 <LL_ADC_IsInternalRegulatorEnabled>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d115      	bne.n	8001622 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff66 	bl	80014cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001600:	4b84      	ldr	r3, [pc, #528]	; (8001814 <HAL_ADC_Init+0x284>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	099b      	lsrs	r3, r3, #6
 8001606:	4a84      	ldr	r2, [pc, #528]	; (8001818 <HAL_ADC_Init+0x288>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	3301      	adds	r3, #1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001614:	e002      	b.n	800161c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff64 	bl	80014f4 <LL_ADC_IsInternalRegulatorEnabled>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10d      	bne.n	800164e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f043 0210 	orr.w	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff75 	bl	8001542 <LL_ADC_REG_IsConversionOngoing>
 8001658:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 80c8 	bne.w	80017f8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 80c4 	bne.w	80017f8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001678:	f043 0202 	orr.w	r2, r3, #2
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff49 	bl	800151c <LL_ADC_IsEnabled>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10b      	bne.n	80016a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001690:	4862      	ldr	r0, [pc, #392]	; (800181c <HAL_ADC_Init+0x28c>)
 8001692:	f7ff ff43 	bl	800151c <LL_ADC_IsEnabled>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4619      	mov	r1, r3
 80016a2:	485f      	ldr	r0, [pc, #380]	; (8001820 <HAL_ADC_Init+0x290>)
 80016a4:	f7ff fdae 	bl	8001204 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7e5b      	ldrb	r3, [r3, #25]
 80016ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d106      	bne.n	80016e4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	3b01      	subs	r3, #1
 80016dc:	045b      	lsls	r3, r3, #17
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_ADC_Init+0x294>)
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	69b9      	ldr	r1, [r7, #24]
 8001710:	430b      	orrs	r3, r1
 8001712:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff12 	bl	8001542 <LL_ADC_REG_IsConversionOngoing>
 800171e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff1f 	bl	8001568 <LL_ADC_INJ_IsConversionOngoing>
 800172a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d140      	bne.n	80017b4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d13d      	bne.n	80017b4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7e1b      	ldrb	r3, [r3, #24]
 8001740:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001742:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800174a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800175a:	f023 0306 	bic.w	r3, r3, #6
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	430b      	orrs	r3, r1
 8001766:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800176e:	2b01      	cmp	r3, #1
 8001770:	d118      	bne.n	80017a4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001788:	4311      	orrs	r1, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800178e:	4311      	orrs	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001794:	430a      	orrs	r2, r1
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	e007      	b.n	80017b4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d10c      	bne.n	80017d6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f023 010f 	bic.w	r1, r3, #15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	1e5a      	subs	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
 80017d4:	e007      	b.n	80017e6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 020f 	bic.w	r2, r2, #15
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	f023 0303 	bic.w	r3, r3, #3
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	659a      	str	r2, [r3, #88]	; 0x58
 80017f6:	e007      	b.n	8001808 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f043 0210 	orr.w	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001808:	7ffb      	ldrb	r3, [r7, #31]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000068 	.word	0x20000068
 8001818:	053e2d63 	.word	0x053e2d63
 800181c:	50040000 	.word	0x50040000
 8001820:	50040300 	.word	0x50040300
 8001824:	fff0c007 	.word	0xfff0c007

08001828 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d017      	beq.n	800187e <HAL_ADC_IRQHandler+0x56>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d012      	beq.n	800187e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 fdcf 	bl	8002414 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2202      	movs	r2, #2
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_ADC_IRQHandler+0x6a>
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001898:	2b00      	cmp	r3, #0
 800189a:	d05e      	beq.n	800195a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d059      	beq.n	800195a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fd3a 	bl	800133c <LL_ADC_REG_IsTriggerSourceSWStart>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d03e      	beq.n	800194c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d135      	bne.n	800194c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d12e      	bne.n	800194c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe25 	bl	8001542 <LL_ADC_REG_IsConversionOngoing>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d11a      	bne.n	8001934 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 020c 	bic.w	r2, r2, #12
 800190c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d112      	bne.n	800194c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	659a      	str	r2, [r3, #88]	; 0x58
 8001932:	e00b      	b.n	800194c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	f043 0210 	orr.w	r2, r3, #16
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f91f 	bl	8001b90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_ADC_IRQHandler+0x146>
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001974:	2b00      	cmp	r3, #0
 8001976:	d072      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d06d      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fd0b 	bl	80013ba <LL_ADC_INJ_IsTriggerSourceSWStart>
 80019a4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fcc6 	bl	800133c <LL_ADC_REG_IsTriggerSourceSWStart>
 80019b0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d047      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <HAL_ADC_IRQHandler+0x1b2>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d03f      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d13a      	bne.n	8001a50 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e4:	2b40      	cmp	r3, #64	; 0x40
 80019e6:	d133      	bne.n	8001a50 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d12e      	bne.n	8001a50 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fdb6 	bl	8001568 <LL_ADC_INJ_IsConversionOngoing>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d11a      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a10:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d112      	bne.n	8001a50 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	659a      	str	r2, [r3, #88]	; 0x58
 8001a36:	e00b      	b.n	8001a50 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	f043 0210 	orr.w	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fcb7 	bl	80023c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2260      	movs	r2, #96	; 0x60
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d011      	beq.n	8001a8c <HAL_ADC_IRQHandler+0x264>
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00c      	beq.n	8001a8c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f890 	bl	8001ba4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d012      	beq.n	8001abc <HAL_ADC_IRQHandler+0x294>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00d      	beq.n	8001abc <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fc9d 	bl	80023ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d012      	beq.n	8001aec <HAL_ADC_IRQHandler+0x2c4>
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00d      	beq.n	8001aec <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fc8f 	bl	8002400 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d02a      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x324>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d025      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	e008      	b.n	8001b20 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10e      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	f043 0202 	orr.w	r2, r3, #2
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f83a 	bl	8001bb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d018      	beq.n	8001b88 <HAL_ADC_IRQHandler+0x360>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	f043 0208 	orr.w	r2, r3, #8
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b80:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fc28 	bl	80023d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0b6      	sub	sp, #216	; 0xd8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x22>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e3d5      	b.n	800239a <HAL_ADC_ConfigChannel+0x7ce>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fca1 	bl	8001542 <LL_ADC_REG_IsConversionOngoing>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 83ba 	bne.w	800237c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d824      	bhi.n	8001c5a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	3b02      	subs	r3, #2
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d81b      	bhi.n	8001c52 <HAL_ADC_ConfigChannel+0x86>
 8001c1a:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <HAL_ADC_ConfigChannel+0x54>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c31 	.word	0x08001c31
 8001c24:	08001c39 	.word	0x08001c39
 8001c28:	08001c41 	.word	0x08001c41
 8001c2c:	08001c49 	.word	0x08001c49
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	220c      	movs	r2, #12
 8001c34:	605a      	str	r2, [r3, #4]
          break;
 8001c36:	e011      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2212      	movs	r2, #18
 8001c3c:	605a      	str	r2, [r3, #4]
          break;
 8001c3e:	e00d      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2218      	movs	r2, #24
 8001c44:	605a      	str	r2, [r3, #4]
          break;
 8001c46:	e009      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4e:	605a      	str	r2, [r3, #4]
          break;
 8001c50:	e004      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2206      	movs	r2, #6
 8001c56:	605a      	str	r2, [r3, #4]
          break;
 8001c58:	e000      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001c5a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f7ff fb7a 	bl	8001362 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc65 	bl	8001542 <LL_ADC_REG_IsConversionOngoing>
 8001c78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fc71 	bl	8001568 <LL_ADC_INJ_IsConversionOngoing>
 8001c86:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f040 81c1 	bne.w	8002016 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 81bc 	bne.w	8002016 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7ff fb94 	bl	80013e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fb28 	bl	8001316 <LL_ADC_SetSamplingTimeCommonConfig>
 8001cc6:	e00e      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6819      	ldr	r1, [r3, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f7ff fb83 	bl	80013e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fb18 	bl	8001316 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d00a      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6919      	ldr	r1, [r3, #16]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d18:	f7ff faa8 	bl	800126c <LL_ADC_SetOffset>
 8001d1c:	e17b      	b.n	8002016 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fac5 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x17e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff faba 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	e01e      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x1bc>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff faaf 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e004      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1d4>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0e9b      	lsrs	r3, r3, #26
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	e018      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x206>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e004      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d106      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fa7e 	bl	80012e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fa62 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10a      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x244>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2101      	movs	r1, #1
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fa57 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	f003 021f 	and.w	r2, r3, #31
 8001e0e:	e01e      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x282>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fa4c 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e004      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001e42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x29a>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	0e9b      	lsrs	r3, r3, #26
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	e018      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x2cc>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e004      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d106      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fa1b 	bl	80012e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f9ff 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x30a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f9f4 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	0e9b      	lsrs	r3, r3, #26
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	e01e      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x348>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2102      	movs	r1, #2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f9e9 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ef8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001f04:	2320      	movs	r3, #32
 8001f06:	e004      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x360>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	e016      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x38e>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e004      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d106      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	2102      	movs	r1, #2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f9ba 	bl	80012e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2103      	movs	r1, #3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f99e 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10a      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x3cc>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2103      	movs	r1, #3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f993 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	f003 021f 	and.w	r2, r3, #31
 8001f96:	e017      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x3fc>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2103      	movs	r1, #3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f988 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001fb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fb2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001fba:	2320      	movs	r3, #32
 8001fbc:	e003      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x414>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0e9b      	lsrs	r3, r3, #26
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	e011      	b.n	8002004 <HAL_ADC_ConfigChannel+0x438>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	e003      	b.n	8002004 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	2103      	movs	r1, #3
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f965 	bl	80012e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fa7e 	bl	800151c <LL_ADC_IsEnabled>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 8140 	bne.w	80022a8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	461a      	mov	r2, r3
 8002036:	f7ff f9ff 	bl	8001438 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4a8f      	ldr	r2, [pc, #572]	; (800227c <HAL_ADC_ConfigChannel+0x6b0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	f040 8131 	bne.w	80022a8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10b      	bne.n	800206e <HAL_ADC_ConfigChannel+0x4a2>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	3301      	adds	r3, #1
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2b09      	cmp	r3, #9
 8002064:	bf94      	ite	ls
 8002066:	2301      	movls	r3, #1
 8002068:	2300      	movhi	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	e019      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x4d6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800207c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800207e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e003      	b.n	8002092 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800208a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2b09      	cmp	r3, #9
 800209a:	bf94      	ite	ls
 800209c:	2301      	movls	r3, #1
 800209e:	2300      	movhi	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d079      	beq.n	800219a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d107      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x4f6>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	3301      	adds	r3, #1
 80020ba:	069b      	lsls	r3, r3, #26
 80020bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c0:	e015      	b.n	80020ee <HAL_ADC_ConfigChannel+0x522>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80020d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e003      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80020de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	069b      	lsls	r3, r3, #26
 80020ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_ADC_ConfigChannel+0x542>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	3301      	adds	r3, #1
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	e017      	b.n	800213e <HAL_ADC_ConfigChannel+0x572>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800211c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e003      	b.n	8002132 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800212a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	ea42 0103 	orr.w	r1, r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10a      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x598>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	0e9b      	lsrs	r3, r3, #26
 8002154:	3301      	adds	r3, #1
 8002156:	f003 021f 	and.w	r2, r3, #31
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	051b      	lsls	r3, r3, #20
 8002162:	e018      	b.n	8002196 <HAL_ADC_ConfigChannel+0x5ca>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800217c:	2320      	movs	r3, #32
 800217e:	e003      	b.n	8002188 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f003 021f 	and.w	r2, r3, #31
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002196:	430b      	orrs	r3, r1
 8002198:	e081      	b.n	800229e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d107      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x5ea>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0e9b      	lsrs	r3, r3, #26
 80021ac:	3301      	adds	r3, #1
 80021ae:	069b      	lsls	r3, r3, #26
 80021b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b4:	e015      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x616>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80021ce:	2320      	movs	r3, #32
 80021d0:	e003      	b.n	80021da <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	069b      	lsls	r3, r3, #26
 80021de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x636>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	3301      	adds	r3, #1
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	e017      	b.n	8002232 <HAL_ADC_ConfigChannel+0x666>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	61fb      	str	r3, [r7, #28]
  return result;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e003      	b.n	8002226 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	ea42 0103 	orr.w	r1, r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10d      	bne.n	800225e <HAL_ADC_ConfigChannel+0x692>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	3301      	adds	r3, #1
 800224a:	f003 021f 	and.w	r2, r3, #31
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	3b1e      	subs	r3, #30
 8002256:	051b      	lsls	r3, r3, #20
 8002258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800225c:	e01e      	b.n	800229c <HAL_ADC_ConfigChannel+0x6d0>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	613b      	str	r3, [r7, #16]
  return result;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d104      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e006      	b.n	8002288 <HAL_ADC_ConfigChannel+0x6bc>
 800227a:	bf00      	nop
 800227c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f003 021f 	and.w	r2, r3, #31
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	3b1e      	subs	r3, #30
 8002296:	051b      	lsls	r3, r3, #20
 8002298:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800229c:	430b      	orrs	r3, r1
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	6892      	ldr	r2, [r2, #8]
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7ff f89c 	bl	80013e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d06c      	beq.n	800238e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b4:	483c      	ldr	r0, [pc, #240]	; (80023a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80022b6:	f7fe ffcb 	bl	8001250 <LL_ADC_GetCommonPathInternalCh>
 80022ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a3a      	ldr	r2, [pc, #232]	; (80023ac <HAL_ADC_ConfigChannel+0x7e0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d127      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d121      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a35      	ldr	r2, [pc, #212]	; (80023b0 <HAL_ADC_ConfigChannel+0x7e4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d157      	bne.n	800238e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022e6:	4619      	mov	r1, r3
 80022e8:	482f      	ldr	r0, [pc, #188]	; (80023a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80022ea:	f7fe ff9e 	bl	800122a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_ADC_ConfigChannel+0x7e8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	099b      	lsrs	r3, r3, #6
 80022f4:	4a30      	ldr	r2, [pc, #192]	; (80023b8 <HAL_ADC_ConfigChannel+0x7ec>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002308:	e002      	b.n	8002310 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3b01      	subs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002316:	e03a      	b.n	800238e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a27      	ldr	r2, [pc, #156]	; (80023bc <HAL_ADC_ConfigChannel+0x7f0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d113      	bne.n	800234a <HAL_ADC_ConfigChannel+0x77e>
 8002322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d12a      	bne.n	800238e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002340:	4619      	mov	r1, r3
 8002342:	4819      	ldr	r0, [pc, #100]	; (80023a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002344:	f7fe ff71 	bl	800122a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002348:	e021      	b.n	800238e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d11c      	bne.n	800238e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d116      	bne.n	800238e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d111      	bne.n	800238e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800236a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800236e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002372:	4619      	mov	r1, r3
 8002374:	480c      	ldr	r0, [pc, #48]	; (80023a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002376:	f7fe ff58 	bl	800122a <LL_ADC_SetCommonPathInternalCh>
 800237a:	e008      	b.n	800238e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002396:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800239a:	4618      	mov	r0, r3
 800239c:	37d8      	adds	r7, #216	; 0xd8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	80080000 	.word	0x80080000
 80023a8:	50040300 	.word	0x50040300
 80023ac:	c7520000 	.word	0xc7520000
 80023b0:	50040000 	.word	0x50040000
 80023b4:	20000068 	.word	0x20000068
 80023b8:	053e2d63 	.word	0x053e2d63
 80023bc:	cb840000 	.word	0xcb840000
 80023c0:	80000001 	.word	0x80000001

080023c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a8:	f7ff ff8e 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff29 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff3e 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff8e 	bl	800251c <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5d 	bl	80024c8 <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff31 	bl	800248c <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa2 	bl	8002584 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265a:	e166      	b.n	800292a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8158 	beq.w	8002924 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d005      	beq.n	800268c <HAL_GPIO_Init+0x40>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d130      	bne.n	80026ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c2:	2201      	movs	r2, #1
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f003 0201 	and.w	r2, r3, #1
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d017      	beq.n	800272a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2203      	movs	r2, #3
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d123      	bne.n	800277e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	6939      	ldr	r1, [r7, #16]
 800277a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	2203      	movs	r2, #3
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0203 	and.w	r2, r3, #3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80b2 	beq.w	8002924 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_GPIO_Init+0x2fc>)
 80027c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c4:	4a60      	ldr	r2, [pc, #384]	; (8002948 <HAL_GPIO_Init+0x2fc>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6613      	str	r3, [r2, #96]	; 0x60
 80027cc:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <HAL_GPIO_Init+0x2fc>)
 80027ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027d8:	4a5c      	ldr	r2, [pc, #368]	; (800294c <HAL_GPIO_Init+0x300>)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002802:	d02b      	beq.n	800285c <HAL_GPIO_Init+0x210>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d025      	beq.n	8002858 <HAL_GPIO_Init+0x20c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a51      	ldr	r2, [pc, #324]	; (8002954 <HAL_GPIO_Init+0x308>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d01f      	beq.n	8002854 <HAL_GPIO_Init+0x208>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a50      	ldr	r2, [pc, #320]	; (8002958 <HAL_GPIO_Init+0x30c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d019      	beq.n	8002850 <HAL_GPIO_Init+0x204>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a4f      	ldr	r2, [pc, #316]	; (800295c <HAL_GPIO_Init+0x310>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d013      	beq.n	800284c <HAL_GPIO_Init+0x200>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_GPIO_Init+0x314>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00d      	beq.n	8002848 <HAL_GPIO_Init+0x1fc>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <HAL_GPIO_Init+0x318>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d007      	beq.n	8002844 <HAL_GPIO_Init+0x1f8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_GPIO_Init+0x31c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_GPIO_Init+0x1f4>
 800283c:	2307      	movs	r3, #7
 800283e:	e00e      	b.n	800285e <HAL_GPIO_Init+0x212>
 8002840:	2308      	movs	r3, #8
 8002842:	e00c      	b.n	800285e <HAL_GPIO_Init+0x212>
 8002844:	2306      	movs	r3, #6
 8002846:	e00a      	b.n	800285e <HAL_GPIO_Init+0x212>
 8002848:	2305      	movs	r3, #5
 800284a:	e008      	b.n	800285e <HAL_GPIO_Init+0x212>
 800284c:	2304      	movs	r3, #4
 800284e:	e006      	b.n	800285e <HAL_GPIO_Init+0x212>
 8002850:	2303      	movs	r3, #3
 8002852:	e004      	b.n	800285e <HAL_GPIO_Init+0x212>
 8002854:	2302      	movs	r3, #2
 8002856:	e002      	b.n	800285e <HAL_GPIO_Init+0x212>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_GPIO_Init+0x212>
 800285c:	2300      	movs	r3, #0
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	f002 0203 	and.w	r2, r2, #3
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	4093      	lsls	r3, r2
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800286e:	4937      	ldr	r1, [pc, #220]	; (800294c <HAL_GPIO_Init+0x300>)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_GPIO_Init+0x320>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028a0:	4a32      	ldr	r2, [pc, #200]	; (800296c <HAL_GPIO_Init+0x320>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028a6:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_GPIO_Init+0x320>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ca:	4a28      	ldr	r2, [pc, #160]	; (800296c <HAL_GPIO_Init+0x320>)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_GPIO_Init+0x320>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028f4:	4a1d      	ldr	r2, [pc, #116]	; (800296c <HAL_GPIO_Init+0x320>)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_GPIO_Init+0x320>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800291e:	4a13      	ldr	r2, [pc, #76]	; (800296c <HAL_GPIO_Init+0x320>)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f ae91 	bne.w	800265c <HAL_GPIO_Init+0x10>
  }
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	48000400 	.word	0x48000400
 8002954:	48000800 	.word	0x48000800
 8002958:	48000c00 	.word	0x48000c00
 800295c:	48001000 	.word	0x48001000
 8002960:	48001400 	.word	0x48001400
 8002964:	48001800 	.word	0x48001800
 8002968:	48001c00 	.word	0x48001c00
 800296c:	40010400 	.word	0x40010400

08002970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]
 800297c:	4613      	mov	r3, r2
 800297e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002980:	787b      	ldrb	r3, [r7, #1]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800298c:	e002      	b.n	8002994 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b08f      	sub	sp, #60	; 0x3c
 80029a4:	af0a      	add	r7, sp, #40	; 0x28
 80029a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e116      	b.n	8002be0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe fa85 	bl	8000edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2203      	movs	r2, #3
 80029d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 ff97 	bl	8005924 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	687e      	ldr	r6, [r7, #4]
 80029fe:	466d      	mov	r5, sp
 8002a00:	f106 0410 	add.w	r4, r6, #16
 8002a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a14:	1d33      	adds	r3, r6, #4
 8002a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	f002 ff57 	bl	80058cc <USB_CoreInit>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0d7      	b.n	8002be0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f002 ff85 	bl	8005946 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e04a      	b.n	8002ad8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	333d      	adds	r3, #61	; 0x3d
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	333c      	adds	r3, #60	; 0x3c
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	b298      	uxth	r0, r3
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3344      	adds	r3, #68	; 0x44
 8002a7e:	4602      	mov	r2, r0
 8002a80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3340      	adds	r3, #64	; 0x40
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3348      	adds	r3, #72	; 0x48
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	334c      	adds	r3, #76	; 0x4c
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3354      	adds	r3, #84	; 0x54
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d3af      	bcc.n	8002a42 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e044      	b.n	8002b72 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3b5      	bcc.n	8002ae8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	687e      	ldr	r6, [r7, #4]
 8002b84:	466d      	mov	r5, sp
 8002b86:	f106 0410 	add.w	r4, r6, #16
 8002b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b9a:	1d33      	adds	r3, r6, #4
 8002b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	f002 ff1e 	bl	80059e0 <USB_DevInit>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e014      	b.n	8002be0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f80a 	bl	8002be8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 f8ca 	bl	8005d72 <USB_DevDisconnect>

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	f043 0303 	orr.w	r3, r3, #3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c40:	d102      	bne.n	8002c48 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c46:	e00b      	b.n	8002c60 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c56:	d102      	bne.n	8002c5e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c5c:	e000      	b.n	8002c60 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002c5e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40007000 	.word	0x40007000

08002c70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d141      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8a:	d131      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c8c:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c92:	4a46      	ldr	r2, [pc, #280]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca4:	4a41      	ldr	r2, [pc, #260]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002cac:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2232      	movs	r2, #50	; 0x32
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	4a3f      	ldr	r2, [pc, #252]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc2:	e002      	b.n	8002cca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd6:	d102      	bne.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f2      	bne.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cde:	4b33      	ldr	r3, [pc, #204]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cea:	d158      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e057      	b.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cf0:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf6:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d00:	e04d      	b.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d08:	d141      	bne.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d16:	d131      	bne.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1e:	4a23      	ldr	r2, [pc, #140]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d28:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d30:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2232      	movs	r2, #50	; 0x32
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0c9b      	lsrs	r3, r3, #18
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d4e:	e002      	b.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d102      	bne.n	8002d6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f2      	bne.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d76:	d112      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e011      	b.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d8c:	e007      	b.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d9c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40007000 	.word	0x40007000
 8002db0:	20000068 	.word	0x20000068
 8002db4:	431bde83 	.word	0x431bde83

08002db8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc6:	6053      	str	r3, [r2, #4]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40007000 	.word	0x40007000

08002dd8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de6:	6053      	str	r3, [r2, #4]
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40007000 	.word	0x40007000

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d102      	bne.n	8002e0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f000 bc08 	b.w	800361c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0c:	4b96      	ldr	r3, [pc, #600]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e16:	4b94      	ldr	r3, [pc, #592]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80e4 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4c>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	f040 808b 	bne.w	8002f52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	f040 8087 	bne.w	8002f52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e44:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x64>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e3df      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	4b81      	ldr	r3, [pc, #516]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d004      	beq.n	8002e76 <HAL_RCC_OscConfig+0x7e>
 8002e6c:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e74:	e005      	b.n	8002e82 <HAL_RCC_OscConfig+0x8a>
 8002e76:	4b7c      	ldr	r3, [pc, #496]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d223      	bcs.n	8002ece <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fdcc 	bl	8003a28 <RCC_SetFlashLatencyFromMSIRange>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e3c0      	b.n	800361c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e9a:	4b73      	ldr	r3, [pc, #460]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a72      	ldr	r2, [pc, #456]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	f043 0308 	orr.w	r3, r3, #8
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	496d      	ldr	r1, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb8:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	4968      	ldr	r1, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
 8002ecc:	e025      	b.n	8002f1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a65      	ldr	r2, [pc, #404]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	f043 0308 	orr.w	r3, r3, #8
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4960      	ldr	r1, [pc, #384]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eec:	4b5e      	ldr	r3, [pc, #376]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	495b      	ldr	r1, [pc, #364]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fd8c 	bl	8003a28 <RCC_SetFlashLatencyFromMSIRange>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e380      	b.n	800361c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f1a:	f000 fcc1 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	4b51      	ldr	r3, [pc, #324]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4950      	ldr	r1, [pc, #320]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8002f2c:	5ccb      	ldrb	r3, [r1, r3]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a4e      	ldr	r2, [pc, #312]	; (8003070 <HAL_RCC_OscConfig+0x278>)
 8002f38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f3a:	4b4e      	ldr	r3, [pc, #312]	; (8003074 <HAL_RCC_OscConfig+0x27c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f8e0 	bl	8001104 <HAL_InitTick>
 8002f44:	4603      	mov	r3, r0
 8002f46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d052      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	e364      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d032      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f5a:	4b43      	ldr	r3, [pc, #268]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a42      	ldr	r2, [pc, #264]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f66:	f7fe f91d 	bl	80011a4 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f6e:	f7fe f919 	bl	80011a4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e34d      	b.n	800361c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f80:	4b39      	ldr	r3, [pc, #228]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a35      	ldr	r2, [pc, #212]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002f92:	f043 0308 	orr.w	r3, r3, #8
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4930      	ldr	r1, [pc, #192]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	492b      	ldr	r1, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
 8002fbe:	e01a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a28      	ldr	r2, [pc, #160]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f8ea 	bl	80011a4 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd4:	f7fe f8e6 	bl	80011a4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e31a      	b.n	800361c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1dc>
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ff4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d073      	beq.n	80030ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d005      	beq.n	8003014 <HAL_RCC_OscConfig+0x21c>
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d10e      	bne.n	800302c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d10b      	bne.n	800302c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d063      	beq.n	80030e8 <HAL_RCC_OscConfig+0x2f0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d15f      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e2f7      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003034:	d106      	bne.n	8003044 <HAL_RCC_OscConfig+0x24c>
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e025      	b.n	8003090 <HAL_RCC_OscConfig+0x298>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304c:	d114      	bne.n	8003078 <HAL_RCC_OscConfig+0x280>
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8003054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a02      	ldr	r2, [pc, #8]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e013      	b.n	8003090 <HAL_RCC_OscConfig+0x298>
 8003068:	40021000 	.word	0x40021000
 800306c:	08005ea8 	.word	0x08005ea8
 8003070:	20000068 	.word	0x20000068
 8003074:	2000006c 	.word	0x2000006c
 8003078:	4ba0      	ldr	r3, [pc, #640]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a9f      	ldr	r2, [pc, #636]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b9d      	ldr	r3, [pc, #628]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a9c      	ldr	r2, [pc, #624]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe f884 	bl	80011a4 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe f880 	bl	80011a4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e2b4      	b.n	800361c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b2:	4b92      	ldr	r3, [pc, #584]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x2a8>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe f870 	bl	80011a4 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe f86c 	bl	80011a4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e2a0      	b.n	800361c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030da:	4b88      	ldr	r3, [pc, #544]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x2d0>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d060      	beq.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_OscConfig+0x310>
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d119      	bne.n	8003136 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d116      	bne.n	8003136 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003108:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_OscConfig+0x328>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e27d      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b76      	ldr	r3, [pc, #472]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	4973      	ldr	r1, [pc, #460]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003134:	e040      	b.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d023      	beq.n	8003186 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800313e:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6e      	ldr	r2, [pc, #440]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fe f82b 	bl	80011a4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003152:	f7fe f827 	bl	80011a4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e25b      	b.n	800361c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003164:	4b65      	ldr	r3, [pc, #404]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	4b62      	ldr	r3, [pc, #392]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	495f      	ldr	r1, [pc, #380]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
 8003184:	e018      	b.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003186:	4b5d      	ldr	r3, [pc, #372]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a5c      	ldr	r2, [pc, #368]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 800318c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe f807 	bl	80011a4 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319a:	f7fe f803 	bl	80011a4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e237      	b.n	800361c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f0      	bne.n	800319a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d03c      	beq.n	800323e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01c      	beq.n	8003206 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031cc:	4b4b      	ldr	r3, [pc, #300]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80031ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d2:	4a4a      	ldr	r2, [pc, #296]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fd ffe2 	bl	80011a4 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e4:	f7fd ffde 	bl	80011a4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e212      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80031f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ef      	beq.n	80031e4 <HAL_RCC_OscConfig+0x3ec>
 8003204:	e01b      	b.n	800323e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320c:	4a3b      	ldr	r2, [pc, #236]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7fd ffc5 	bl	80011a4 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321e:	f7fd ffc1 	bl	80011a4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1f5      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1ef      	bne.n	800321e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80a6 	beq.w	8003398 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003250:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10d      	bne.n	8003278 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	4a26      	ldr	r2, [pc, #152]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003266:	6593      	str	r3, [r2, #88]	; 0x58
 8003268:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003274:	2301      	movs	r3, #1
 8003276:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003278:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCC_OscConfig+0x508>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d118      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_RCC_OscConfig+0x508>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <HAL_RCC_OscConfig+0x508>)
 800328a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003290:	f7fd ff88 	bl	80011a4 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003298:	f7fd ff84 	bl	80011a4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1b8      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_RCC_OscConfig+0x508>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4d8>
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ce:	e029      	b.n	8003324 <HAL_RCC_OscConfig+0x52c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d115      	bne.n	8003304 <HAL_RCC_OscConfig+0x50c>
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	4a07      	ldr	r2, [pc, #28]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	4a03      	ldr	r2, [pc, #12]	; (80032fc <HAL_RCC_OscConfig+0x504>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f8:	e014      	b.n	8003324 <HAL_RCC_OscConfig+0x52c>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	40007000 	.word	0x40007000
 8003304:	4b9d      	ldr	r3, [pc, #628]	; (800357c <HAL_RCC_OscConfig+0x784>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	4a9c      	ldr	r2, [pc, #624]	; (800357c <HAL_RCC_OscConfig+0x784>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003314:	4b99      	ldr	r3, [pc, #612]	; (800357c <HAL_RCC_OscConfig+0x784>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	4a98      	ldr	r2, [pc, #608]	; (800357c <HAL_RCC_OscConfig+0x784>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d016      	beq.n	800335a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fd ff3a 	bl	80011a4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fd ff36 	bl	80011a4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e168      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334a:	4b8c      	ldr	r3, [pc, #560]	; (800357c <HAL_RCC_OscConfig+0x784>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ed      	beq.n	8003334 <HAL_RCC_OscConfig+0x53c>
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7fd ff23 	bl	80011a4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fd ff1f 	bl	80011a4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e151      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003378:	4b80      	ldr	r3, [pc, #512]	; (800357c <HAL_RCC_OscConfig+0x784>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ed      	bne.n	8003362 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003386:	7ffb      	ldrb	r3, [r7, #31]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d105      	bne.n	8003398 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338c:	4b7b      	ldr	r3, [pc, #492]	; (800357c <HAL_RCC_OscConfig+0x784>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	4a7a      	ldr	r2, [pc, #488]	; (800357c <HAL_RCC_OscConfig+0x784>)
 8003392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003396:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d03c      	beq.n	800341e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033ac:	4b73      	ldr	r3, [pc, #460]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80033ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033b2:	4a72      	ldr	r2, [pc, #456]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fd fef2 	bl	80011a4 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c4:	f7fd feee 	bl	80011a4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e122      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033d6:	4b69      	ldr	r3, [pc, #420]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80033d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ef      	beq.n	80033c4 <HAL_RCC_OscConfig+0x5cc>
 80033e4:	e01b      	b.n	800341e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033e6:	4b65      	ldr	r3, [pc, #404]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80033e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ec:	4a63      	ldr	r2, [pc, #396]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fd fed5 	bl	80011a4 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033fe:	f7fd fed1 	bl	80011a4 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e105      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003410:	4b5a      	ldr	r3, [pc, #360]	; (800357c <HAL_RCC_OscConfig+0x784>)
 8003412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ef      	bne.n	80033fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80f9 	beq.w	800361a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	2b02      	cmp	r3, #2
 800342e:	f040 80cf 	bne.w	80035d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003432:	4b52      	ldr	r3, [pc, #328]	; (800357c <HAL_RCC_OscConfig+0x784>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 0203 	and.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	429a      	cmp	r2, r3
 8003444:	d12c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	3b01      	subs	r3, #1
 8003452:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d123      	bne.n	80034a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003462:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d11b      	bne.n	80034a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d113      	bne.n	80034a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	3b01      	subs	r3, #1
 8003486:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d109      	bne.n	80034a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d071      	beq.n	8003584 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d068      	beq.n	8003578 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034a6:	4b35      	ldr	r3, [pc, #212]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034b2:	4b32      	ldr	r3, [pc, #200]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0ac      	b.n	800361c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034c2:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2d      	ldr	r2, [pc, #180]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80034c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ce:	f7fd fe69 	bl	80011a4 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fd fe65 	bl	80011a4 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e099      	b.n	800361c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f4:	4b21      	ldr	r3, [pc, #132]	; (800357c <HAL_RCC_OscConfig+0x784>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003504:	3a01      	subs	r2, #1
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	4311      	orrs	r1, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800350e:	0212      	lsls	r2, r2, #8
 8003510:	4311      	orrs	r1, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003516:	0852      	lsrs	r2, r2, #1
 8003518:	3a01      	subs	r2, #1
 800351a:	0552      	lsls	r2, r2, #21
 800351c:	4311      	orrs	r1, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003522:	0852      	lsrs	r2, r2, #1
 8003524:	3a01      	subs	r2, #1
 8003526:	0652      	lsls	r2, r2, #25
 8003528:	4311      	orrs	r1, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352e:	06d2      	lsls	r2, r2, #27
 8003530:	430a      	orrs	r2, r1
 8003532:	4912      	ldr	r1, [pc, #72]	; (800357c <HAL_RCC_OscConfig+0x784>)
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003538:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_RCC_OscConfig+0x784>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_RCC_OscConfig+0x784>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003544:	4b0d      	ldr	r3, [pc, #52]	; (800357c <HAL_RCC_OscConfig+0x784>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a0c      	ldr	r2, [pc, #48]	; (800357c <HAL_RCC_OscConfig+0x784>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003550:	f7fd fe28 	bl	80011a4 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fd fe24 	bl	80011a4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e058      	b.n	800361c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <HAL_RCC_OscConfig+0x784>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003576:	e050      	b.n	800361a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e04f      	b.n	800361c <HAL_RCC_OscConfig+0x824>
 800357c:	40021000 	.word	0x40021000
 8003580:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003584:	4b27      	ldr	r3, [pc, #156]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d144      	bne.n	800361a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003590:	4b24      	ldr	r3, [pc, #144]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a23      	ldr	r2, [pc, #140]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a20      	ldr	r2, [pc, #128]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a8:	f7fd fdfc 	bl	80011a4 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fd fdf8 	bl	80011a4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e02c      	b.n	800361c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x7b8>
 80035ce:	e024      	b.n	800361a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d01f      	beq.n	8003616 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a12      	ldr	r2, [pc, #72]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 80035dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fd fddf 	bl	80011a4 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fd fddb 	bl	80011a4 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e00f      	b.n	800361c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4905      	ldr	r1, [pc, #20]	; (8003624 <HAL_RCC_OscConfig+0x82c>)
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCC_OscConfig+0x830>)
 8003610:	4013      	ands	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
 8003614:	e001      	b.n	800361a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	feeefffc 	.word	0xfeeefffc

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e11d      	b.n	8003880 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b90      	ldr	r3, [pc, #576]	; (8003888 <HAL_RCC_ClockConfig+0x25c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d910      	bls.n	8003674 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b8d      	ldr	r3, [pc, #564]	; (8003888 <HAL_RCC_ClockConfig+0x25c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 020f 	bic.w	r2, r3, #15
 800365a:	498b      	ldr	r1, [pc, #556]	; (8003888 <HAL_RCC_ClockConfig+0x25c>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b89      	ldr	r3, [pc, #548]	; (8003888 <HAL_RCC_ClockConfig+0x25c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e105      	b.n	8003880 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368c:	429a      	cmp	r2, r3
 800368e:	d908      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b7e      	ldr	r3, [pc, #504]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	497b      	ldr	r1, [pc, #492]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d079      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d11e      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b6:	4b75      	ldr	r3, [pc, #468]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0dc      	b.n	8003880 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80036c6:	f000 fa09 	bl	8003adc <RCC_GetSysClockFreqFromPLLSource>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4a70      	ldr	r2, [pc, #448]	; (8003890 <HAL_RCC_ClockConfig+0x264>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d946      	bls.n	8003760 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036d2:	4b6e      	ldr	r3, [pc, #440]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d140      	bne.n	8003760 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036de:	4b6b      	ldr	r3, [pc, #428]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036e6:	4a69      	ldr	r2, [pc, #420]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80036e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e035      	b.n	8003760 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d107      	bne.n	800370c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fc:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d115      	bne.n	8003734 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b9      	b.n	8003880 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003714:	4b5d      	ldr	r3, [pc, #372]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0ad      	b.n	8003880 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0a5      	b.n	8003880 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003734:	f000 f8b4 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8003738:	4603      	mov	r3, r0
 800373a:	4a55      	ldr	r2, [pc, #340]	; (8003890 <HAL_RCC_ClockConfig+0x264>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d90f      	bls.n	8003760 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003740:	4b52      	ldr	r3, [pc, #328]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800374c:	4b4f      	ldr	r3, [pc, #316]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003754:	4a4d      	ldr	r2, [pc, #308]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003760:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 0203 	bic.w	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4947      	ldr	r1, [pc, #284]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003772:	f7fd fd17 	bl	80011a4 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003778:	e00a      	b.n	8003790 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377a:	f7fd fd13 	bl	80011a4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	; 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e077      	b.n	8003880 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003790:	4b3e      	ldr	r3, [pc, #248]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 020c 	and.w	r2, r3, #12
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	429a      	cmp	r2, r3
 80037a0:	d1eb      	bne.n	800377a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b80      	cmp	r3, #128	; 0x80
 80037a6:	d105      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037a8:	4b38      	ldr	r3, [pc, #224]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a37      	ldr	r2, [pc, #220]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80037ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d208      	bcs.n	80037e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b2e      	ldr	r3, [pc, #184]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	492b      	ldr	r1, [pc, #172]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <HAL_RCC_ClockConfig+0x25c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d210      	bcs.n	8003812 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x25c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 020f 	bic.w	r2, r3, #15
 80037f8:	4923      	ldr	r1, [pc, #140]	; (8003888 <HAL_RCC_ClockConfig+0x25c>)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003800:	4b21      	ldr	r3, [pc, #132]	; (8003888 <HAL_RCC_ClockConfig+0x25c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d001      	beq.n	8003812 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e036      	b.n	8003880 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4918      	ldr	r1, [pc, #96]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4910      	ldr	r1, [pc, #64]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003850:	f000 f826 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_RCC_ClockConfig+0x260>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	490c      	ldr	r1, [pc, #48]	; (8003894 <HAL_RCC_ClockConfig+0x268>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x26c>)
 800386e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_RCC_ClockConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd fc45 	bl	8001104 <HAL_InitTick>
 800387a:	4603      	mov	r3, r0
 800387c:	73fb      	strb	r3, [r7, #15]

  return status;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40022000 	.word	0x40022000
 800388c:	40021000 	.word	0x40021000
 8003890:	04c4b400 	.word	0x04c4b400
 8003894:	08005ea8 	.word	0x08005ea8
 8003898:	20000068 	.word	0x20000068
 800389c:	2000006c 	.word	0x2000006c

080038a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ae:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b8:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x34>
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d121      	bne.n	8003912 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d11e      	bne.n	8003912 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038d4:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038e0:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	e005      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038fc:	4a2b      	ldr	r2, [pc, #172]	; (80039ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003904:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10d      	bne.n	8003928 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d102      	bne.n	800391e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	e004      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d101      	bne.n	8003928 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003926:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b0c      	cmp	r3, #12
 800392c:	d134      	bne.n	8003998 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d003      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0xa6>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d003      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0xac>
 8003944:	e005      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003948:	617b      	str	r3, [r7, #20]
      break;
 800394a:	e005      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800394e:	617b      	str	r3, [r7, #20]
      break;
 8003950:	e002      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	617b      	str	r3, [r7, #20]
      break;
 8003956:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003958:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	3301      	adds	r3, #1
 8003964:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	fb03 f202 	mul.w	r2, r3, r2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	0e5b      	lsrs	r3, r3, #25
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	3301      	adds	r3, #1
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003998:	69bb      	ldr	r3, [r7, #24]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	; 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08005ec0 	.word	0x08005ec0
 80039b0:	00f42400 	.word	0x00f42400
 80039b4:	007a1200 	.word	0x007a1200

080039b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCC_GetHCLKFreq+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000068 	.word	0x20000068

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039d4:	f7ff fff0 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4904      	ldr	r1, [pc, #16]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	08005eb8 	.word	0x08005eb8

080039fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a00:	f7ff ffda 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	0adb      	lsrs	r3, r3, #11
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4904      	ldr	r1, [pc, #16]	; (8003a24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08005eb8 	.word	0x08005eb8

08003a28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a40:	f7ff f8f6 	bl	8002c30 <HAL_PWREx_GetVoltageRange>
 8003a44:	6178      	str	r0, [r7, #20]
 8003a46:	e014      	b.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a48:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	4a21      	ldr	r2, [pc, #132]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a52:	6593      	str	r3, [r2, #88]	; 0x58
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a60:	f7ff f8e6 	bl	8002c30 <HAL_PWREx_GetVoltageRange>
 8003a64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a78:	d10b      	bne.n	8003a92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	d913      	bls.n	8003aa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2ba0      	cmp	r3, #160	; 0xa0
 8003a84:	d902      	bls.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a86:	2302      	movs	r3, #2
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e00d      	b.n	8003aa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	e00a      	b.n	8003aa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b7f      	cmp	r3, #127	; 0x7f
 8003a96:	d902      	bls.n	8003a9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003a98:	2302      	movs	r3, #2
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	e004      	b.n	8003aa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b70      	cmp	r3, #112	; 0x70
 8003aa2:	d101      	bne.n	8003aa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 020f 	bic.w	r2, r3, #15
 8003ab0:	4909      	ldr	r1, [pc, #36]	; (8003ad8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d001      	beq.n	8003aca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40022000 	.word	0x40022000

08003adc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d00b      	beq.n	8003b0a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d825      	bhi.n	8003b44 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d008      	beq.n	8003b10 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d11f      	bne.n	8003b44 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b06:	613b      	str	r3, [r7, #16]
    break;
 8003b08:	e01f      	b.n	8003b4a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003b0a:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003b0c:	613b      	str	r3, [r7, #16]
    break;
 8003b0e:	e01c      	b.n	8003b4a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b10:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b1c:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e005      	b.n	8003b38 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003b38:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	613b      	str	r3, [r7, #16]
    break;
 8003b42:	e002      	b.n	8003b4a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
    break;
 8003b48:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	3301      	adds	r3, #1
 8003b56:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	fb03 f202 	mul.w	r2, r3, r2
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0e5b      	lsrs	r3, r3, #25
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003b8a:	683b      	ldr	r3, [r7, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	00f42400 	.word	0x00f42400
 8003ba0:	007a1200 	.word	0x007a1200
 8003ba4:	08005ec0 	.word	0x08005ec0

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d040      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	d02a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bcc:	2b80      	cmp	r3, #128	; 0x80
 8003bce:	d825      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bd0:	2b60      	cmp	r3, #96	; 0x60
 8003bd2:	d026      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bd4:	2b60      	cmp	r3, #96	; 0x60
 8003bd6:	d821      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d006      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d81d      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d009      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d010      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003be8:	e018      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bea:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4a88      	ldr	r2, [pc, #544]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf6:	e015      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fb02 	bl	8004208 <RCCEx_PLLSAI1_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c08:	e00c      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3320      	adds	r3, #32
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fbed 	bl	80043f0 <RCCEx_PLLSAI2_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	74fb      	strb	r3, [r7, #19]
      break;
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10b      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c2a:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c30:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c38:	4975      	ldr	r1, [pc, #468]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c40:	e001      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d047      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	d030      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c60:	d82a      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c66:	d02a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6c:	d824      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c72:	d008      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c78:	d81e      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c82:	d010      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c84:	e018      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c86:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4a61      	ldr	r2, [pc, #388]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c90:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c92:	e015      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fab4 	bl	8004208 <RCCEx_PLLSAI1_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca4:	e00c      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3320      	adds	r3, #32
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fb9f 	bl	80043f0 <RCCEx_PLLSAI2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	74fb      	strb	r3, [r7, #19]
      break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cc6:	4b52      	ldr	r3, [pc, #328]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	494e      	ldr	r1, [pc, #312]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 809f 	beq.w	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cf4:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	4a40      	ldr	r2, [pc, #256]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6593      	str	r3, [r2, #88]	; 0x58
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d22:	2301      	movs	r3, #1
 8003d24:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d26:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a3a      	ldr	r2, [pc, #232]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d32:	f7fd fa37 	bl	80011a4 <HAL_GetTick>
 8003d36:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d38:	e009      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3a:	f7fd fa33 	bl	80011a4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d902      	bls.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	74fb      	strb	r3, [r7, #19]
        break;
 8003d4c:	e005      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ef      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d15b      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d01f      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d019      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d8a:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003daa:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d016      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd f9f2 	bl	80011a4 <HAL_GetTick>
 8003dc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fd f9ee 	bl	80011a4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d902      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	74fb      	strb	r3, [r7, #19]
            break;
 8003dda:	e006      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ec      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e08:	e008      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	74bb      	strb	r3, [r7, #18]
 8003e0e:	e005      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1c:	7c7b      	ldrb	r3, [r7, #17]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4ba0      	ldr	r3, [pc, #640]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	4a9f      	ldr	r2, [pc, #636]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e3a:	4b9a      	ldr	r3, [pc, #616]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f023 0203 	bic.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	4996      	ldr	r1, [pc, #600]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e5c:	4b91      	ldr	r3, [pc, #580]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 020c 	bic.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	498e      	ldr	r1, [pc, #568]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e7e:	4b89      	ldr	r3, [pc, #548]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	4985      	ldr	r1, [pc, #532]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ea0:	4b80      	ldr	r3, [pc, #512]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eae:	497d      	ldr	r1, [pc, #500]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ec2:	4b78      	ldr	r3, [pc, #480]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed0:	4974      	ldr	r1, [pc, #464]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee4:	4b6f      	ldr	r3, [pc, #444]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef2:	496c      	ldr	r1, [pc, #432]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f06:	4b67      	ldr	r3, [pc, #412]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f14:	4963      	ldr	r1, [pc, #396]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f28:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f36:	495b      	ldr	r1, [pc, #364]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f4a:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	4952      	ldr	r1, [pc, #328]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f6c:	4b4d      	ldr	r3, [pc, #308]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	494a      	ldr	r1, [pc, #296]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f8e:	4b45      	ldr	r3, [pc, #276]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	4941      	ldr	r1, [pc, #260]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb0:	4b3c      	ldr	r3, [pc, #240]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbe:	4939      	ldr	r1, [pc, #228]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d028      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fd2:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe0:	4930      	ldr	r1, [pc, #192]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff0:	d106      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffc:	60d3      	str	r3, [r2, #12]
 8003ffe:	e011      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004008:	d10c      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f8f9 	bl	8004208 <RCCEx_PLLSAI1_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d04d      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004038:	d108      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800403a:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800403c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004046:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800404a:	e012      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800404e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004058:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406a:	490e      	ldr	r1, [pc, #56]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407a:	d106      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004086:	60d3      	str	r3, [r2, #12]
 8004088:	e020      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004092:	d109      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a02      	ldr	r2, [pc, #8]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409e:	60d3      	str	r3, [r2, #12]
 80040a0:	e014      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2101      	movs	r1, #1
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f8a5 	bl	8004208 <RCCEx_PLLSAI1_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d028      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d8:	4b4a      	ldr	r3, [pc, #296]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e6:	4947      	ldr	r1, [pc, #284]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f6:	d106      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f8:	4b42      	ldr	r3, [pc, #264]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a41      	ldr	r2, [pc, #260]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	e011      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800410e:	d10c      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f876 	bl	8004208 <RCCEx_PLLSAI1_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01e      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004136:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004146:	492f      	ldr	r1, [pc, #188]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004158:	d10c      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f851 	bl	8004208 <RCCEx_PLLSAI1_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004180:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004186:	f023 0204 	bic.w	r2, r3, #4
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004190:	491c      	ldr	r1, [pc, #112]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041aa:	f023 0218 	bic.w	r2, r3, #24
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	4913      	ldr	r1, [pc, #76]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d017      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d8:	490a      	ldr	r1, [pc, #40]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ea:	d105      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4a04      	ldr	r2, [pc, #16]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000

08004208 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004216:	4b72      	ldr	r3, [pc, #456]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00e      	beq.n	8004240 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004222:	4b6f      	ldr	r3, [pc, #444]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0203 	and.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d103      	bne.n	800423a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
       ||
 8004236:	2b00      	cmp	r3, #0
 8004238:	d142      	bne.n	80042c0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
 800423e:	e03f      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d018      	beq.n	800427a <RCCEx_PLLSAI1_Config+0x72>
 8004248:	2b03      	cmp	r3, #3
 800424a:	d825      	bhi.n	8004298 <RCCEx_PLLSAI1_Config+0x90>
 800424c:	2b01      	cmp	r3, #1
 800424e:	d002      	beq.n	8004256 <RCCEx_PLLSAI1_Config+0x4e>
 8004250:	2b02      	cmp	r3, #2
 8004252:	d009      	beq.n	8004268 <RCCEx_PLLSAI1_Config+0x60>
 8004254:	e020      	b.n	8004298 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004256:	4b62      	ldr	r3, [pc, #392]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d11d      	bne.n	800429e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004266:	e01a      	b.n	800429e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004268:	4b5d      	ldr	r3, [pc, #372]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004278:	e013      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800427a:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004286:	4b56      	ldr	r3, [pc, #344]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004296:	e006      	b.n	80042a6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      break;
 800429c:	e004      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80042a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80042ae:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4949      	ldr	r1, [pc, #292]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 8086 	bne.w	80043d4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042c8:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a44      	ldr	r2, [pc, #272]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d4:	f7fc ff66 	bl	80011a4 <HAL_GetTick>
 80042d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042da:	e009      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042dc:	f7fc ff62 	bl	80011a4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d902      	bls.n	80042f0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	73fb      	strb	r3, [r7, #15]
        break;
 80042ee:	e005      	b.n	80042fc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042f0:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ef      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d168      	bne.n	80043d4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d113      	bne.n	8004330 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	4b35      	ldr	r3, [pc, #212]	; (80043e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800430e:	4013      	ands	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	0211      	lsls	r1, r2, #8
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68d2      	ldr	r2, [r2, #12]
 800431a:	06d2      	lsls	r2, r2, #27
 800431c:	4311      	orrs	r1, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6852      	ldr	r2, [r2, #4]
 8004322:	3a01      	subs	r2, #1
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	430a      	orrs	r2, r1
 8004328:	492d      	ldr	r1, [pc, #180]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	610b      	str	r3, [r1, #16]
 800432e:	e02d      	b.n	800438c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d115      	bne.n	8004362 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004336:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6892      	ldr	r2, [r2, #8]
 8004342:	0211      	lsls	r1, r2, #8
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6912      	ldr	r2, [r2, #16]
 8004348:	0852      	lsrs	r2, r2, #1
 800434a:	3a01      	subs	r2, #1
 800434c:	0552      	lsls	r2, r2, #21
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6852      	ldr	r2, [r2, #4]
 8004354:	3a01      	subs	r2, #1
 8004356:	0112      	lsls	r2, r2, #4
 8004358:	430a      	orrs	r2, r1
 800435a:	4921      	ldr	r1, [pc, #132]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800435c:	4313      	orrs	r3, r2
 800435e:	610b      	str	r3, [r1, #16]
 8004360:	e014      	b.n	800438c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004362:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	4b21      	ldr	r3, [pc, #132]	; (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004368:	4013      	ands	r3, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6892      	ldr	r2, [r2, #8]
 800436e:	0211      	lsls	r1, r2, #8
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6952      	ldr	r2, [r2, #20]
 8004374:	0852      	lsrs	r2, r2, #1
 8004376:	3a01      	subs	r2, #1
 8004378:	0652      	lsls	r2, r2, #25
 800437a:	4311      	orrs	r1, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6852      	ldr	r2, [r2, #4]
 8004380:	3a01      	subs	r2, #1
 8004382:	0112      	lsls	r2, r2, #4
 8004384:	430a      	orrs	r2, r1
 8004386:	4916      	ldr	r1, [pc, #88]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004388:	4313      	orrs	r3, r2
 800438a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004396:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fc ff04 	bl	80011a4 <HAL_GetTick>
 800439c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800439e:	e009      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043a0:	f7fc ff00 	bl	80011a4 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d902      	bls.n	80043b4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	73fb      	strb	r3, [r7, #15]
          break;
 80043b2:	e005      	b.n	80043c0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ef      	beq.n	80043a0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	4904      	ldr	r1, [pc, #16]	; (80043e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	07ff800f 	.word	0x07ff800f
 80043e8:	ff9f800f 	.word	0xff9f800f
 80043ec:	f9ff800f 	.word	0xf9ff800f

080043f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043fe:	4b72      	ldr	r3, [pc, #456]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00e      	beq.n	8004428 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800440a:	4b6f      	ldr	r3, [pc, #444]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0203 	and.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d103      	bne.n	8004422 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
       ||
 800441e:	2b00      	cmp	r3, #0
 8004420:	d142      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
 8004426:	e03f      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d018      	beq.n	8004462 <RCCEx_PLLSAI2_Config+0x72>
 8004430:	2b03      	cmp	r3, #3
 8004432:	d825      	bhi.n	8004480 <RCCEx_PLLSAI2_Config+0x90>
 8004434:	2b01      	cmp	r3, #1
 8004436:	d002      	beq.n	800443e <RCCEx_PLLSAI2_Config+0x4e>
 8004438:	2b02      	cmp	r3, #2
 800443a:	d009      	beq.n	8004450 <RCCEx_PLLSAI2_Config+0x60>
 800443c:	e020      	b.n	8004480 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800443e:	4b62      	ldr	r3, [pc, #392]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11d      	bne.n	8004486 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444e:	e01a      	b.n	8004486 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004450:	4b5d      	ldr	r3, [pc, #372]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	2b00      	cmp	r3, #0
 800445a:	d116      	bne.n	800448a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004460:	e013      	b.n	800448a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004462:	4b59      	ldr	r3, [pc, #356]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800446e:	4b56      	ldr	r3, [pc, #344]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800447e:	e006      	b.n	800448e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      break;
 8004484:	e004      	b.n	8004490 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004486:	bf00      	nop
 8004488:	e002      	b.n	8004490 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800448e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d108      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004496:	4b4c      	ldr	r3, [pc, #304]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4949      	ldr	r1, [pc, #292]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 8086 	bne.w	80045bc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044b0:	4b45      	ldr	r3, [pc, #276]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a44      	ldr	r2, [pc, #272]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044bc:	f7fc fe72 	bl	80011a4 <HAL_GetTick>
 80044c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044c2:	e009      	b.n	80044d8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044c4:	f7fc fe6e 	bl	80011a4 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d902      	bls.n	80044d8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	73fb      	strb	r3, [r7, #15]
        break;
 80044d6:	e005      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044d8:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1ef      	bne.n	80044c4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d168      	bne.n	80045bc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d113      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044f0:	4b35      	ldr	r3, [pc, #212]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	4b35      	ldr	r3, [pc, #212]	; (80045cc <RCCEx_PLLSAI2_Config+0x1dc>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
 80044fc:	0211      	lsls	r1, r2, #8
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68d2      	ldr	r2, [r2, #12]
 8004502:	06d2      	lsls	r2, r2, #27
 8004504:	4311      	orrs	r1, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6852      	ldr	r2, [r2, #4]
 800450a:	3a01      	subs	r2, #1
 800450c:	0112      	lsls	r2, r2, #4
 800450e:	430a      	orrs	r2, r1
 8004510:	492d      	ldr	r1, [pc, #180]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	614b      	str	r3, [r1, #20]
 8004516:	e02d      	b.n	8004574 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d115      	bne.n	800454a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800451e:	4b2a      	ldr	r3, [pc, #168]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6892      	ldr	r2, [r2, #8]
 800452a:	0211      	lsls	r1, r2, #8
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6912      	ldr	r2, [r2, #16]
 8004530:	0852      	lsrs	r2, r2, #1
 8004532:	3a01      	subs	r2, #1
 8004534:	0552      	lsls	r2, r2, #21
 8004536:	4311      	orrs	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6852      	ldr	r2, [r2, #4]
 800453c:	3a01      	subs	r2, #1
 800453e:	0112      	lsls	r2, r2, #4
 8004540:	430a      	orrs	r2, r1
 8004542:	4921      	ldr	r1, [pc, #132]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004544:	4313      	orrs	r3, r2
 8004546:	614b      	str	r3, [r1, #20]
 8004548:	e014      	b.n	8004574 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800454a:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004550:	4013      	ands	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6892      	ldr	r2, [r2, #8]
 8004556:	0211      	lsls	r1, r2, #8
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6952      	ldr	r2, [r2, #20]
 800455c:	0852      	lsrs	r2, r2, #1
 800455e:	3a01      	subs	r2, #1
 8004560:	0652      	lsls	r2, r2, #25
 8004562:	4311      	orrs	r1, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6852      	ldr	r2, [r2, #4]
 8004568:	3a01      	subs	r2, #1
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	430a      	orrs	r2, r1
 800456e:	4916      	ldr	r1, [pc, #88]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004570:	4313      	orrs	r3, r2
 8004572:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004574:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fc fe10 	bl	80011a4 <HAL_GetTick>
 8004584:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004586:	e009      	b.n	800459c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004588:	f7fc fe0c 	bl	80011a4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d902      	bls.n	800459c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	73fb      	strb	r3, [r7, #15]
          break;
 800459a:	e005      	b.n	80045a8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800459c:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ef      	beq.n	8004588 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	4904      	ldr	r1, [pc, #16]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000
 80045cc:	07ff800f 	.word	0x07ff800f
 80045d0:	ff9f800f 	.word	0xff9f800f
 80045d4:	f9ff800f 	.word	0xf9ff800f

080045d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e095      	b.n	8004716 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fa:	d009      	beq.n	8004610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
 8004602:	e005      	b.n	8004610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fc14 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004646:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004650:	d902      	bls.n	8004658 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e002      	b.n	800465e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800465c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004666:	d007      	beq.n	8004678 <HAL_SPI_Init+0xa0>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004670:	d002      	beq.n	8004678 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	ea42 0103 	orr.w	r1, r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	0c1b      	lsrs	r3, r3, #16
 80046d4:	f003 0204 	and.w	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046f4:	ea42 0103 	orr.w	r1, r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b088      	sub	sp, #32
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_SPI_Transmit+0x22>
 800473c:	2302      	movs	r3, #2
 800473e:	e158      	b.n	80049f2 <HAL_SPI_Transmit+0x2d4>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004748:	f7fc fd2c 	bl	80011a4 <HAL_GetTick>
 800474c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d002      	beq.n	8004764 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004762:	e13d      	b.n	80049e0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_SPI_Transmit+0x52>
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004774:	e134      	b.n	80049e0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c0:	d10f      	bne.n	80047e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d007      	beq.n	8004800 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004808:	d94b      	bls.n	80048a2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_SPI_Transmit+0xfa>
 8004812:	8afb      	ldrh	r3, [r7, #22]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d13e      	bne.n	8004896 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	1c9a      	adds	r2, r3, #2
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800483c:	e02b      	b.n	8004896 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d112      	bne.n	8004872 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	881a      	ldrh	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	1c9a      	adds	r2, r3, #2
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004870:	e011      	b.n	8004896 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004872:	f7fc fc97 	bl	80011a4 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d803      	bhi.n	800488a <HAL_SPI_Transmit+0x16c>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004888:	d102      	bne.n	8004890 <HAL_SPI_Transmit+0x172>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004894:	e0a4      	b.n	80049e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ce      	bne.n	800483e <HAL_SPI_Transmit+0x120>
 80048a0:	e07c      	b.n	800499c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_Transmit+0x192>
 80048aa:	8afb      	ldrh	r3, [r7, #22]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d170      	bne.n	8004992 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d912      	bls.n	80048e0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	1c9a      	adds	r2, r3, #2
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b02      	subs	r3, #2
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048de:	e058      	b.n	8004992 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004906:	e044      	b.n	8004992 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d12b      	bne.n	800496e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d912      	bls.n	8004946 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	881a      	ldrh	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	1c9a      	adds	r2, r3, #2
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b02      	subs	r3, #2
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004944:	e025      	b.n	8004992 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800496c:	e011      	b.n	8004992 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800496e:	f7fc fc19 	bl	80011a4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d803      	bhi.n	8004986 <HAL_SPI_Transmit+0x268>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004984:	d102      	bne.n	800498c <HAL_SPI_Transmit+0x26e>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004990:	e026      	b.n	80049e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1b5      	bne.n	8004908 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f949 	bl	8004c38 <SPI_EndRxTxTransaction>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e000      	b.n	80049e0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80049de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a0c:	f7fc fbca 	bl	80011a4 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a1c:	f7fc fbc2 	bl	80011a4 <HAL_GetTick>
 8004a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a22:	4b39      	ldr	r3, [pc, #228]	; (8004b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	015b      	lsls	r3, r3, #5
 8004a28:	0d1b      	lsrs	r3, r3, #20
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	fb02 f303 	mul.w	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a32:	e054      	b.n	8004ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a3a:	d050      	beq.n	8004ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a3c:	f7fc fbb2 	bl	80011a4 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d902      	bls.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d13d      	bne.n	8004ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6a:	d111      	bne.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a74:	d004      	beq.n	8004a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d107      	bne.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d10f      	bne.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e017      	b.n	8004afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d19b      	bne.n	8004a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000068 	.word	0x20000068

08004b0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b1e:	f7fc fb41 	bl	80011a4 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b2e:	f7fc fb39 	bl	80011a4 <HAL_GetTick>
 8004b32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b3c:	4b3d      	ldr	r3, [pc, #244]	; (8004c34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	00da      	lsls	r2, r3, #3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	0d1b      	lsrs	r3, r3, #20
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b54:	e060      	b.n	8004c18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b5c:	d107      	bne.n	8004b6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b74:	d050      	beq.n	8004c18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b76:	f7fc fb15 	bl	80011a4 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d902      	bls.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d13d      	bne.n	8004c08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba4:	d111      	bne.n	8004bca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bae:	d004      	beq.n	8004bba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d107      	bne.n	8004bca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd2:	d10f      	bne.n	8004bf4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e010      	b.n	8004c2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d196      	bne.n	8004b56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3728      	adds	r7, #40	; 0x28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000068 	.word	0x20000068

08004c38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7ff ff5b 	bl	8004b0c <SPI_WaitFifoStateUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e027      	b.n	8004cbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2200      	movs	r2, #0
 8004c74:	2180      	movs	r1, #128	; 0x80
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fec0 	bl	80049fc <SPI_WaitFlagStateUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e014      	b.n	8004cbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff ff34 	bl	8004b0c <SPI_WaitFifoStateUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e000      	b.n	8004cbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e042      	b.n	8004d5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fc f80f 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2224      	movs	r2, #36	; 0x24
 8004cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f82c 	bl	8004d64 <UART_SetConfig>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e022      	b.n	8004d5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fb1c 	bl	800535c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fba3 	bl	80054a0 <UART_CheckIdleState>
 8004d5a:	4603      	mov	r3, r0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d68:	b08c      	sub	sp, #48	; 0x30
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4baa      	ldr	r3, [pc, #680]	; (800503c <UART_SetConfig+0x2d8>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a9f      	ldr	r2, [pc, #636]	; (8005040 <UART_SetConfig+0x2dc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004dda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	f023 010f 	bic.w	r1, r3, #15
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a90      	ldr	r2, [pc, #576]	; (8005044 <UART_SetConfig+0x2e0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d125      	bne.n	8004e54 <UART_SetConfig+0xf0>
 8004e08:	4b8f      	ldr	r3, [pc, #572]	; (8005048 <UART_SetConfig+0x2e4>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d81a      	bhi.n	8004e4c <UART_SetConfig+0xe8>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <UART_SetConfig+0xb8>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e3d 	.word	0x08004e3d
 8004e24:	08004e35 	.word	0x08004e35
 8004e28:	08004e45 	.word	0x08004e45
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e32:	e116      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004e34:	2302      	movs	r3, #2
 8004e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3a:	e112      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e42:	e10e      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004e44:	2308      	movs	r3, #8
 8004e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4a:	e10a      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e52:	e106      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7c      	ldr	r2, [pc, #496]	; (800504c <UART_SetConfig+0x2e8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d138      	bne.n	8004ed0 <UART_SetConfig+0x16c>
 8004e5e:	4b7a      	ldr	r3, [pc, #488]	; (8005048 <UART_SetConfig+0x2e4>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	d82d      	bhi.n	8004ec8 <UART_SetConfig+0x164>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <UART_SetConfig+0x110>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004ea9 	.word	0x08004ea9
 8004e78:	08004ec9 	.word	0x08004ec9
 8004e7c:	08004ec9 	.word	0x08004ec9
 8004e80:	08004ec9 	.word	0x08004ec9
 8004e84:	08004eb9 	.word	0x08004eb9
 8004e88:	08004ec9 	.word	0x08004ec9
 8004e8c:	08004ec9 	.word	0x08004ec9
 8004e90:	08004ec9 	.word	0x08004ec9
 8004e94:	08004eb1 	.word	0x08004eb1
 8004e98:	08004ec9 	.word	0x08004ec9
 8004e9c:	08004ec9 	.word	0x08004ec9
 8004ea0:	08004ec9 	.word	0x08004ec9
 8004ea4:	08004ec1 	.word	0x08004ec1
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eae:	e0d8      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eb6:	e0d4      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ebe:	e0d0      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ec6:	e0cc      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ece:	e0c8      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a5e      	ldr	r2, [pc, #376]	; (8005050 <UART_SetConfig+0x2ec>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d125      	bne.n	8004f26 <UART_SetConfig+0x1c2>
 8004eda:	4b5b      	ldr	r3, [pc, #364]	; (8005048 <UART_SetConfig+0x2e4>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ee4:	2b30      	cmp	r3, #48	; 0x30
 8004ee6:	d016      	beq.n	8004f16 <UART_SetConfig+0x1b2>
 8004ee8:	2b30      	cmp	r3, #48	; 0x30
 8004eea:	d818      	bhi.n	8004f1e <UART_SetConfig+0x1ba>
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d00a      	beq.n	8004f06 <UART_SetConfig+0x1a2>
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d814      	bhi.n	8004f1e <UART_SetConfig+0x1ba>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <UART_SetConfig+0x19a>
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d008      	beq.n	8004f0e <UART_SetConfig+0x1aa>
 8004efc:	e00f      	b.n	8004f1e <UART_SetConfig+0x1ba>
 8004efe:	2300      	movs	r3, #0
 8004f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f04:	e0ad      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f06:	2302      	movs	r3, #2
 8004f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f0c:	e0a9      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f0e:	2304      	movs	r3, #4
 8004f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f14:	e0a5      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f16:	2308      	movs	r3, #8
 8004f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1c:	e0a1      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f1e:	2310      	movs	r3, #16
 8004f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f24:	e09d      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a4a      	ldr	r2, [pc, #296]	; (8005054 <UART_SetConfig+0x2f0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d125      	bne.n	8004f7c <UART_SetConfig+0x218>
 8004f30:	4b45      	ldr	r3, [pc, #276]	; (8005048 <UART_SetConfig+0x2e4>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f3c:	d016      	beq.n	8004f6c <UART_SetConfig+0x208>
 8004f3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f40:	d818      	bhi.n	8004f74 <UART_SetConfig+0x210>
 8004f42:	2b80      	cmp	r3, #128	; 0x80
 8004f44:	d00a      	beq.n	8004f5c <UART_SetConfig+0x1f8>
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d814      	bhi.n	8004f74 <UART_SetConfig+0x210>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <UART_SetConfig+0x1f0>
 8004f4e:	2b40      	cmp	r3, #64	; 0x40
 8004f50:	d008      	beq.n	8004f64 <UART_SetConfig+0x200>
 8004f52:	e00f      	b.n	8004f74 <UART_SetConfig+0x210>
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5a:	e082      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f62:	e07e      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f6a:	e07a      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f72:	e076      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f7a:	e072      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a35      	ldr	r2, [pc, #212]	; (8005058 <UART_SetConfig+0x2f4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d12a      	bne.n	8004fdc <UART_SetConfig+0x278>
 8004f86:	4b30      	ldr	r3, [pc, #192]	; (8005048 <UART_SetConfig+0x2e4>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f94:	d01a      	beq.n	8004fcc <UART_SetConfig+0x268>
 8004f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9a:	d81b      	bhi.n	8004fd4 <UART_SetConfig+0x270>
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa0:	d00c      	beq.n	8004fbc <UART_SetConfig+0x258>
 8004fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa6:	d815      	bhi.n	8004fd4 <UART_SetConfig+0x270>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <UART_SetConfig+0x250>
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb0:	d008      	beq.n	8004fc4 <UART_SetConfig+0x260>
 8004fb2:	e00f      	b.n	8004fd4 <UART_SetConfig+0x270>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fba:	e052      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc2:	e04e      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fca:	e04a      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd2:	e046      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fda:	e042      	b.n	8005062 <UART_SetConfig+0x2fe>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a17      	ldr	r2, [pc, #92]	; (8005040 <UART_SetConfig+0x2dc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d13a      	bne.n	800505c <UART_SetConfig+0x2f8>
 8004fe6:	4b18      	ldr	r3, [pc, #96]	; (8005048 <UART_SetConfig+0x2e4>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ff0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ff4:	d01a      	beq.n	800502c <UART_SetConfig+0x2c8>
 8004ff6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ffa:	d81b      	bhi.n	8005034 <UART_SetConfig+0x2d0>
 8004ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005000:	d00c      	beq.n	800501c <UART_SetConfig+0x2b8>
 8005002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005006:	d815      	bhi.n	8005034 <UART_SetConfig+0x2d0>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <UART_SetConfig+0x2b0>
 800500c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005010:	d008      	beq.n	8005024 <UART_SetConfig+0x2c0>
 8005012:	e00f      	b.n	8005034 <UART_SetConfig+0x2d0>
 8005014:	2300      	movs	r3, #0
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501a:	e022      	b.n	8005062 <UART_SetConfig+0x2fe>
 800501c:	2302      	movs	r3, #2
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005022:	e01e      	b.n	8005062 <UART_SetConfig+0x2fe>
 8005024:	2304      	movs	r3, #4
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800502a:	e01a      	b.n	8005062 <UART_SetConfig+0x2fe>
 800502c:	2308      	movs	r3, #8
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005032:	e016      	b.n	8005062 <UART_SetConfig+0x2fe>
 8005034:	2310      	movs	r3, #16
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800503a:	e012      	b.n	8005062 <UART_SetConfig+0x2fe>
 800503c:	cfff69f3 	.word	0xcfff69f3
 8005040:	40008000 	.word	0x40008000
 8005044:	40013800 	.word	0x40013800
 8005048:	40021000 	.word	0x40021000
 800504c:	40004400 	.word	0x40004400
 8005050:	40004800 	.word	0x40004800
 8005054:	40004c00 	.word	0x40004c00
 8005058:	40005000 	.word	0x40005000
 800505c:	2310      	movs	r3, #16
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4aae      	ldr	r2, [pc, #696]	; (8005320 <UART_SetConfig+0x5bc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	f040 8097 	bne.w	800519c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800506e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005072:	2b08      	cmp	r3, #8
 8005074:	d823      	bhi.n	80050be <UART_SetConfig+0x35a>
 8005076:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x318>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050bf 	.word	0x080050bf
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050bf 	.word	0x080050bf
 800508c:	080050af 	.word	0x080050af
 8005090:	080050bf 	.word	0x080050bf
 8005094:	080050bf 	.word	0x080050bf
 8005098:	080050bf 	.word	0x080050bf
 800509c:	080050b7 	.word	0x080050b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a0:	f7fe fc96 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80050a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050a6:	e010      	b.n	80050ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a8:	4b9e      	ldr	r3, [pc, #632]	; (8005324 <UART_SetConfig+0x5c0>)
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050ac:	e00d      	b.n	80050ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ae:	f7fe fbf7 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 80050b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050b4:	e009      	b.n	80050ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050bc:	e005      	b.n	80050ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8130 	beq.w	8005332 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	4a94      	ldr	r2, [pc, #592]	; (8005328 <UART_SetConfig+0x5c4>)
 80050d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050dc:	461a      	mov	r2, r3
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d305      	bcc.n	8005102 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d903      	bls.n	800510a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005108:	e113      	b.n	8005332 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	2200      	movs	r2, #0
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	60fa      	str	r2, [r7, #12]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	4a84      	ldr	r2, [pc, #528]	; (8005328 <UART_SetConfig+0x5c4>)
 8005118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800511c:	b29b      	uxth	r3, r3
 800511e:	2200      	movs	r2, #0
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005128:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800512c:	f7fb f866 	bl	80001fc <__aeabi_uldivmod>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	020b      	lsls	r3, r1, #8
 8005142:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005146:	0202      	lsls	r2, r0, #8
 8005148:	6979      	ldr	r1, [r7, #20]
 800514a:	6849      	ldr	r1, [r1, #4]
 800514c:	0849      	lsrs	r1, r1, #1
 800514e:	2000      	movs	r0, #0
 8005150:	460c      	mov	r4, r1
 8005152:	4605      	mov	r5, r0
 8005154:	eb12 0804 	adds.w	r8, r2, r4
 8005158:	eb43 0905 	adc.w	r9, r3, r5
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	469a      	mov	sl, r3
 8005164:	4693      	mov	fp, r2
 8005166:	4652      	mov	r2, sl
 8005168:	465b      	mov	r3, fp
 800516a:	4640      	mov	r0, r8
 800516c:	4649      	mov	r1, r9
 800516e:	f7fb f845 	bl	80001fc <__aeabi_uldivmod>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4613      	mov	r3, r2
 8005178:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005180:	d308      	bcc.n	8005194 <UART_SetConfig+0x430>
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005188:	d204      	bcs.n	8005194 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e0ce      	b.n	8005332 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800519a:	e0ca      	b.n	8005332 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	d166      	bne.n	8005274 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80051a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d827      	bhi.n	80051fe <UART_SetConfig+0x49a>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x450>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051e1 	.word	0x080051e1
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	080051ff 	.word	0x080051ff
 80051c4:	080051ef 	.word	0x080051ef
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	080051ff 	.word	0x080051ff
 80051d0:	080051ff 	.word	0x080051ff
 80051d4:	080051f7 	.word	0x080051f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7fe fbfa 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051de:	e014      	b.n	800520a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e0:	f7fe fc0c 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 80051e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051e6:	e010      	b.n	800520a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b4e      	ldr	r3, [pc, #312]	; (8005324 <UART_SetConfig+0x5c0>)
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051ec:	e00d      	b.n	800520a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fe fb57 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 80051f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051f4:	e009      	b.n	800520a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051fc:	e005      	b.n	800520a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005208:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8090 	beq.w	8005332 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	4a44      	ldr	r2, [pc, #272]	; (8005328 <UART_SetConfig+0x5c4>)
 8005218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800521c:	461a      	mov	r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	fbb3 f3f2 	udiv	r3, r3, r2
 8005224:	005a      	lsls	r2, r3, #1
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	441a      	add	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	2b0f      	cmp	r3, #15
 800523c:	d916      	bls.n	800526c <UART_SetConfig+0x508>
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005244:	d212      	bcs.n	800526c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f023 030f 	bic.w	r3, r3, #15
 800524e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	b29b      	uxth	r3, r3
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	b29a      	uxth	r2, r3
 800525c:	8bfb      	ldrh	r3, [r7, #30]
 800525e:	4313      	orrs	r3, r2
 8005260:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	8bfa      	ldrh	r2, [r7, #30]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	e062      	b.n	8005332 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005272:	e05e      	b.n	8005332 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005274:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005278:	2b08      	cmp	r3, #8
 800527a:	d828      	bhi.n	80052ce <UART_SetConfig+0x56a>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x520>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	080052cf 	.word	0x080052cf
 8005294:	080052bf 	.word	0x080052bf
 8005298:	080052cf 	.word	0x080052cf
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052cf 	.word	0x080052cf
 80052a4:	080052c7 	.word	0x080052c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7fe fb92 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052ae:	e014      	b.n	80052da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b0:	f7fe fba4 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 80052b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052b6:	e010      	b.n	80052da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <UART_SetConfig+0x5c0>)
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052bc:	e00d      	b.n	80052da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052be:	f7fe faef 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 80052c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052c4:	e009      	b.n	80052da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052cc:	e005      	b.n	80052da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052d8:	bf00      	nop
    }

    if (pclk != 0U)
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d028      	beq.n	8005332 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	4a10      	ldr	r2, [pc, #64]	; (8005328 <UART_SetConfig+0x5c4>)
 80052e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ea:	461a      	mov	r2, r3
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	441a      	add	r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d910      	bls.n	800532c <UART_SetConfig+0x5c8>
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005310:	d20c      	bcs.n	800532c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	b29a      	uxth	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60da      	str	r2, [r3, #12]
 800531c:	e009      	b.n	8005332 <UART_SetConfig+0x5ce>
 800531e:	bf00      	nop
 8005320:	40008000 	.word	0x40008000
 8005324:	00f42400 	.word	0x00f42400
 8005328:	08005ef0 	.word	0x08005ef0
      }
      else
      {
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2201      	movs	r2, #1
 8005336:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2201      	movs	r2, #1
 800533e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2200      	movs	r2, #0
 8005346:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2200      	movs	r2, #0
 800534c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800534e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005352:	4618      	mov	r0, r3
 8005354:	3730      	adds	r7, #48	; 0x30
 8005356:	46bd      	mov	sp, r7
 8005358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800535c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01a      	beq.n	8005472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545a:	d10a      	bne.n	8005472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b0:	f7fb fe78 	bl	80011a4 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d10e      	bne.n	80054e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f82f 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e025      	b.n	800552e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d10e      	bne.n	800550e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f819 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e00f      	b.n	800552e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b09c      	sub	sp, #112	; 0x70
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4613      	mov	r3, r2
 8005544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005546:	e0a9      	b.n	800569c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800554e:	f000 80a5 	beq.w	800569c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005552:	f7fb fe27 	bl	80011a4 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <UART_WaitOnFlagUntilTimeout+0x32>
 8005562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005564:	2b00      	cmp	r3, #0
 8005566:	d140      	bne.n	80055ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800557c:	667b      	str	r3, [r7, #100]	; 0x64
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005588:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800558c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e6      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	663b      	str	r3, [r7, #96]	; 0x60
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80055bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e069      	b.n	80056be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d051      	beq.n	800569c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005606:	d149      	bne.n	800569c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005610:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005626:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
 8005632:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e6      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	613b      	str	r3, [r7, #16]
   return(result);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	66bb      	str	r3, [r7, #104]	; 0x68
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3308      	adds	r3, #8
 8005662:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005664:	623a      	str	r2, [r7, #32]
 8005666:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	69f9      	ldr	r1, [r7, #28]
 800566a:	6a3a      	ldr	r2, [r7, #32]
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	61bb      	str	r3, [r7, #24]
   return(result);
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e010      	b.n	80056be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4013      	ands	r3, r2
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	f43f af46 	beq.w	8005548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3770      	adds	r7, #112	; 0x70
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_UARTEx_DisableFifoMode+0x16>
 80056d8:	2302      	movs	r3, #2
 80056da:	e027      	b.n	800572c <HAL_UARTEx_DisableFifoMode+0x66>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2224      	movs	r2, #36	; 0x24
 80056e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800570a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800574c:	2302      	movs	r3, #2
 800574e:	e02d      	b.n	80057ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2224      	movs	r2, #36	; 0x24
 800575c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f84f 	bl	8005830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e02d      	b.n	8005828 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2224      	movs	r2, #36	; 0x24
 80057d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f811 	bl	8005830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800583c:	2b00      	cmp	r3, #0
 800583e:	d108      	bne.n	8005852 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005850:	e031      	b.n	80058b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005852:	2308      	movs	r3, #8
 8005854:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005856:	2308      	movs	r3, #8
 8005858:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	0e5b      	lsrs	r3, r3, #25
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	0f5b      	lsrs	r3, r3, #29
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800587a:	7bbb      	ldrb	r3, [r7, #14]
 800587c:	7b3a      	ldrb	r2, [r7, #12]
 800587e:	4911      	ldr	r1, [pc, #68]	; (80058c4 <UARTEx_SetNbDataToProcess+0x94>)
 8005880:	5c8a      	ldrb	r2, [r1, r2]
 8005882:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005886:	7b3a      	ldrb	r2, [r7, #12]
 8005888:	490f      	ldr	r1, [pc, #60]	; (80058c8 <UARTEx_SetNbDataToProcess+0x98>)
 800588a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800588c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005890:	b29a      	uxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	7b7a      	ldrb	r2, [r7, #13]
 800589c:	4909      	ldr	r1, [pc, #36]	; (80058c4 <UARTEx_SetNbDataToProcess+0x94>)
 800589e:	5c8a      	ldrb	r2, [r1, r2]
 80058a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058a4:	7b7a      	ldrb	r2, [r7, #13]
 80058a6:	4908      	ldr	r1, [pc, #32]	; (80058c8 <UARTEx_SetNbDataToProcess+0x98>)
 80058a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	08005f08 	.word	0x08005f08
 80058c8:	08005f10 	.word	0x08005f10

080058cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058cc:	b084      	sub	sp, #16
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	f107 001c 	add.w	r0, r7, #28
 80058da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa70 	bl	8005dd0 <USB_CoreReset>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80058f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
 8005906:	e005      	b.n	8005914 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005920:	b004      	add	sp, #16
 8005922:	4770      	bx	lr

08005924 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f023 0201 	bic.w	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	460b      	mov	r3, r1
 8005950:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d115      	bne.n	8005994 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005974:	2001      	movs	r0, #1
 8005976:	f7fb fc21 	bl	80011bc <HAL_Delay>
      ms++;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3301      	adds	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fa17 	bl	8005db4 <USB_GetMode>
 8005986:	4603      	mov	r3, r0
 8005988:	2b01      	cmp	r3, #1
 800598a:	d01e      	beq.n	80059ca <USB_SetCurrentMode+0x84>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b31      	cmp	r3, #49	; 0x31
 8005990:	d9f0      	bls.n	8005974 <USB_SetCurrentMode+0x2e>
 8005992:	e01a      	b.n	80059ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d115      	bne.n	80059c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059a6:	2001      	movs	r0, #1
 80059a8:	f7fb fc08 	bl	80011bc <HAL_Delay>
      ms++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f9fe 	bl	8005db4 <USB_GetMode>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <USB_SetCurrentMode+0x84>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b31      	cmp	r3, #49	; 0x31
 80059c2:	d9f0      	bls.n	80059a6 <USB_SetCurrentMode+0x60>
 80059c4:	e001      	b.n	80059ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e005      	b.n	80059d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b32      	cmp	r3, #50	; 0x32
 80059ce:	d101      	bne.n	80059d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e0:	b084      	sub	sp, #16
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b086      	sub	sp, #24
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e009      	b.n	8005a14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	3340      	adds	r3, #64	; 0x40
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3301      	adds	r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b0e      	cmp	r3, #14
 8005a18:	d9f2      	bls.n	8005a00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d11c      	bne.n	8005a5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2e:	f043 0302 	orr.w	r3, r3, #2
 8005a32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e005      	b.n	8005a66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	4619      	mov	r1, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a80:	461a      	mov	r2, r3
 8005a82:	680b      	ldr	r3, [r1, #0]
 8005a84:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a86:	2103      	movs	r1, #3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f959 	bl	8005d40 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a8e:	2110      	movs	r1, #16
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8f1 	bl	8005c78 <USB_FlushTxFifo>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f91d 	bl	8005ce0 <USB_FlushRxFifo>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	2300      	movs	r3, #0
 8005aba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	461a      	mov	r2, r3
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	e043      	b.n	8005b62 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af0:	d118      	bne.n	8005b24 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	461a      	mov	r2, r3
 8005b06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e013      	b.n	8005b36 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e008      	b.n	8005b36 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	461a      	mov	r2, r3
 8005b32:	2300      	movs	r3, #0
 8005b34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	461a      	mov	r2, r3
 8005b44:	2300      	movs	r3, #0
 8005b46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	461a      	mov	r2, r3
 8005b56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d3b7      	bcc.n	8005ada <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	e043      	b.n	8005bf8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b86:	d118      	bne.n	8005bba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e013      	b.n	8005bcc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	e008      	b.n	8005bcc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	461a      	mov	r2, r3
 8005bec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d3b7      	bcc.n	8005b70 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f043 0210 	orr.w	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <USB_DevInit+0x294>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f043 0208 	orr.w	r2, r3, #8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d107      	bne.n	8005c62 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c5a:	f043 0304 	orr.w	r3, r3, #4
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c6e:	b004      	add	sp, #16
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	803c3800 	.word	0x803c3800

08005c78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <USB_FlushTxFifo+0x64>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d901      	bls.n	8005c98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e01b      	b.n	8005cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	daf2      	bge.n	8005c86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	019b      	lsls	r3, r3, #6
 8005ca8:	f043 0220 	orr.w	r2, r3, #32
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <USB_FlushTxFifo+0x64>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e006      	b.n	8005cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d0f0      	beq.n	8005cb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	00030d40 	.word	0x00030d40

08005ce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <USB_FlushRxFifo+0x5c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d901      	bls.n	8005cfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e018      	b.n	8005d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	daf2      	bge.n	8005cec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2210      	movs	r2, #16
 8005d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <USB_FlushRxFifo+0x5c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e006      	b.n	8005d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d0f0      	beq.n	8005d10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	00030d40 	.word	0x00030d40

08005d40 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d60:	4313      	orrs	r3, r2
 8005d62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d8c:	f023 0303 	bic.w	r3, r3, #3
 8005d90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da0:	f043 0302 	orr.w	r3, r3, #2
 8005da4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a13      	ldr	r2, [pc, #76]	; (8005e34 <USB_CoreReset+0x64>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e01b      	b.n	8005e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	daf2      	bge.n	8005ddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f043 0201 	orr.w	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <USB_CoreReset+0x64>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e006      	b.n	8005e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d0f0      	beq.n	8005e06 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	00030d40 	.word	0x00030d40

08005e38 <__libc_init_array>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	4d0d      	ldr	r5, [pc, #52]	; (8005e70 <__libc_init_array+0x38>)
 8005e3c:	4c0d      	ldr	r4, [pc, #52]	; (8005e74 <__libc_init_array+0x3c>)
 8005e3e:	1b64      	subs	r4, r4, r5
 8005e40:	10a4      	asrs	r4, r4, #2
 8005e42:	2600      	movs	r6, #0
 8005e44:	42a6      	cmp	r6, r4
 8005e46:	d109      	bne.n	8005e5c <__libc_init_array+0x24>
 8005e48:	4d0b      	ldr	r5, [pc, #44]	; (8005e78 <__libc_init_array+0x40>)
 8005e4a:	4c0c      	ldr	r4, [pc, #48]	; (8005e7c <__libc_init_array+0x44>)
 8005e4c:	f000 f820 	bl	8005e90 <_init>
 8005e50:	1b64      	subs	r4, r4, r5
 8005e52:	10a4      	asrs	r4, r4, #2
 8005e54:	2600      	movs	r6, #0
 8005e56:	42a6      	cmp	r6, r4
 8005e58:	d105      	bne.n	8005e66 <__libc_init_array+0x2e>
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
 8005e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e60:	4798      	blx	r3
 8005e62:	3601      	adds	r6, #1
 8005e64:	e7ee      	b.n	8005e44 <__libc_init_array+0xc>
 8005e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6a:	4798      	blx	r3
 8005e6c:	3601      	adds	r6, #1
 8005e6e:	e7f2      	b.n	8005e56 <__libc_init_array+0x1e>
 8005e70:	08005f20 	.word	0x08005f20
 8005e74:	08005f20 	.word	0x08005f20
 8005e78:	08005f20 	.word	0x08005f20
 8005e7c:	08005f24 	.word	0x08005f24

08005e80 <memset>:
 8005e80:	4402      	add	r2, r0
 8005e82:	4603      	mov	r3, r0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d100      	bne.n	8005e8a <memset+0xa>
 8005e88:	4770      	bx	lr
 8005e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8e:	e7f9      	b.n	8005e84 <memset+0x4>

08005e90 <_init>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr

08005e9c <_fini>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr
