
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e78  08005e78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e80  08005e80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  2000000c  08005e94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08005e94  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd60  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a3  00000000  00000000  0003cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  0003fe40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00041670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002faf  00000000  00000000  00042d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b6ad  00000000  00000000  00045d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ae26  00000000  00000000  000613e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c20a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006988  00000000  00000000  0017c25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005df0 	.word	0x08005df0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005df0 	.word	0x08005df0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fd8b 	bl	800101e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f80f 	bl	800052a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa14 	bl	8000938 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000510:	f000 f8c2 	bl	8000698 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f90e 	bl	8000734 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 f9e4 	bl	80008e4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800051c:	f000 f858 	bl	80005d0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000520:	f000 f954 	bl	80007cc <MX_SPI1_Init>
  MX_TIM4_Init();
 8000524:	f000 f990 	bl	8000848 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x28>

0800052a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b096      	sub	sp, #88	; 0x58
 800052e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2244      	movs	r2, #68	; 0x44
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f005 fc51 	bl	8005de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053e:	463b      	mov	r3, r7
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800054c:	2000      	movs	r0, #0
 800054e:	f002 fb35 	bl	8002bbc <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000558:	f000 fac2 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800055c:	2322      	movs	r3, #34	; 0x22
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2340      	movs	r3, #64	; 0x40
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000576:	2302      	movs	r3, #2
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800057a:	231e      	movs	r3, #30
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fbd8 	bl	8002d44 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x74>
  {
    Error_Handler();
 800059a:	f000 faa1 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2303      	movs	r3, #3
 80005a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	463b      	mov	r3, r7
 80005b6:	2105      	movs	r1, #5
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 ffdd 	bl	8003578 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005c4:	f000 fa8c 	bl	8000ae0 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <MX_ADC1_Init+0xbc>)
 80005e8:	4a29      	ldr	r2, [pc, #164]	; (8000690 <MX_ADC1_Init+0xc0>)
 80005ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <MX_ADC1_Init+0xbc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <MX_ADC1_Init+0xbc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <MX_ADC1_Init+0xbc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <MX_ADC1_Init+0xbc>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_ADC1_Init+0xbc>)
 8000606:	2204      	movs	r2, #4
 8000608:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_ADC1_Init+0xbc>)
 800060c:	2200      	movs	r2, #0
 800060e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_ADC1_Init+0xbc>)
 8000612:	2200      	movs	r2, #0
 8000614:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_ADC1_Init+0xbc>)
 8000618:	2201      	movs	r2, #1
 800061a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_ADC1_Init+0xbc>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_ADC1_Init+0xbc>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_ADC1_Init+0xbc>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_ADC1_Init+0xbc>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_ADC1_Init+0xbc>)
 800063a:	2200      	movs	r2, #0
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_ADC1_Init+0xbc>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_ADC1_Init+0xbc>)
 8000648:	f000 ff48 	bl	80014dc <HAL_ADC_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000652:	f000 fa45 	bl	8000ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC1_Init+0xc4>)
 8000658:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065a:	2306      	movs	r3, #6
 800065c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000662:	237f      	movs	r3, #127	; 0x7f
 8000664:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000666:	2304      	movs	r3, #4
 8000668:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_ADC1_Init+0xbc>)
 8000674:	f001 fa50 	bl	8001b18 <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067e:	f000 fa2f 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000028 	.word	0x20000028
 8000690:	50040000 	.word	0x50040000
 8000694:	04300002 	.word	0x04300002

08000698 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 800069e:	4a23      	ldr	r2, [pc, #140]	; (800072c <MX_LPUART1_UART_Init+0x94>)
 80006a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006a4:	4a22      	ldr	r2, [pc, #136]	; (8000730 <MX_LPUART1_UART_Init+0x98>)
 80006a6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006e0:	4811      	ldr	r0, [pc, #68]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006e2:	f004 fa9f 	bl	8004c24 <HAL_UART_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006ec:	f000 f9f8 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 80006f4:	f004 ffd0 	bl	8005698 <HAL_UARTEx_SetTxFifoThreshold>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006fe:	f000 f9ef 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000702:	2100      	movs	r1, #0
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 8000706:	f005 f805 	bl	8005714 <HAL_UARTEx_SetRxFifoThreshold>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000710:	f000 f9e6 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_LPUART1_UART_Init+0x90>)
 8000716:	f004 ff86 	bl	8005626 <HAL_UARTEx_DisableFifoMode>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000720:	f000 f9de 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000090 	.word	0x20000090
 800072c:	40008000 	.word	0x40008000
 8000730:	00033324 	.word	0x00033324

08000734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800073a:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <MX_USART3_UART_Init+0x94>)
 800073c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 800077e:	f004 fa51 	bl	8004c24 <HAL_UART_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000788:	f000 f9aa 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 8000790:	f004 ff82 	bl	8005698 <HAL_UARTEx_SetTxFifoThreshold>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800079a:	f000 f9a1 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4808      	ldr	r0, [pc, #32]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 80007a2:	f004 ffb7 	bl	8005714 <HAL_UARTEx_SetRxFifoThreshold>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007ac:	f000 f998 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_USART3_UART_Init+0x90>)
 80007b2:	f004 ff38 	bl	8005626 <HAL_UARTEx_DisableFifoMode>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007bc:	f000 f990 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000120 	.word	0x20000120
 80007c8:	40004800 	.word	0x40004800

080007cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_SPI1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_SPI1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_SPI1_Init+0x74>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_SPI1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_SPI1_Init+0x74>)
 80007e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_SPI1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_SPI1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_SPI1_Init+0x74>)
 80007fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_SPI1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_SPI1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_SPI1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_SPI1_Init+0x74>)
 800081a:	2207      	movs	r2, #7
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_SPI1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_SPI1_Init+0x74>)
 8000826:	2208      	movs	r2, #8
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_SPI1_Init+0x74>)
 800082c:	f003 fe7a 	bl	8004524 <HAL_SPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 f953 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200001b0 	.word	0x200001b0
 8000844:	40013000 	.word	0x40013000

08000848 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_TIM4_Init+0x94>)
 8000868:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <MX_TIM4_Init+0x98>)
 800086a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_TIM4_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_TIM4_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_TIM4_Init+0x94>)
 800087a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_TIM4_Init+0x94>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_TIM4_Init+0x94>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <MX_TIM4_Init+0x94>)
 800088e:	f003 feec 	bl	800466a <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000898:	f000 f922 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_TIM4_Init+0x94>)
 80008aa:	f003 ff35 	bl	8004718 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008b4:	f000 f914 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_TIM4_Init+0x94>)
 80008c6:	f004 f925 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f906 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000214 	.word	0x20000214
 80008e0:	40000800 	.word	0x40000800

080008e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008f2:	2206      	movs	r2, #6
 80008f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000910:	2201      	movs	r2, #1
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800091c:	2201      	movs	r2, #1
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000922:	f001 ffe3 	bl	80028ec <HAL_PCD_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800092c:	f000 f8d8 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000260 	.word	0x20000260

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b5f      	ldr	r3, [pc, #380]	; (8000acc <MX_GPIO_Init+0x194>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a5e      	ldr	r2, [pc, #376]	; (8000acc <MX_GPIO_Init+0x194>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b5c      	ldr	r3, [pc, #368]	; (8000acc <MX_GPIO_Init+0x194>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	4b59      	ldr	r3, [pc, #356]	; (8000acc <MX_GPIO_Init+0x194>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a58      	ldr	r2, [pc, #352]	; (8000acc <MX_GPIO_Init+0x194>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b56      	ldr	r3, [pc, #344]	; (8000acc <MX_GPIO_Init+0x194>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <MX_GPIO_Init+0x194>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a52      	ldr	r2, [pc, #328]	; (8000acc <MX_GPIO_Init+0x194>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b50      	ldr	r3, [pc, #320]	; (8000acc <MX_GPIO_Init+0x194>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	4b4d      	ldr	r3, [pc, #308]	; (8000acc <MX_GPIO_Init+0x194>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a4c      	ldr	r2, [pc, #304]	; (8000acc <MX_GPIO_Init+0x194>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b4a      	ldr	r3, [pc, #296]	; (8000acc <MX_GPIO_Init+0x194>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <MX_GPIO_Init+0x194>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a46      	ldr	r2, [pc, #280]	; (8000acc <MX_GPIO_Init+0x194>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <MX_GPIO_Init+0x194>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b41      	ldr	r3, [pc, #260]	; (8000acc <MX_GPIO_Init+0x194>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a40      	ldr	r2, [pc, #256]	; (8000acc <MX_GPIO_Init+0x194>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <MX_GPIO_Init+0x194>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <MX_GPIO_Init+0x194>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a3a      	ldr	r2, [pc, #232]	; (8000acc <MX_GPIO_Init+0x194>)
 80009e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <MX_GPIO_Init+0x194>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80009f6:	f002 f995 	bl	8002d24 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a00:	4833      	ldr	r0, [pc, #204]	; (8000ad0 <MX_GPIO_Init+0x198>)
 8000a02:	f001 ff5b 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a0c:	4831      	ldr	r0, [pc, #196]	; (8000ad4 <MX_GPIO_Init+0x19c>)
 8000a0e:	f001 ff55 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2120      	movs	r1, #32
 8000a16:	4830      	ldr	r0, [pc, #192]	; (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000a18:	f001 ff50 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	482a      	ldr	r0, [pc, #168]	; (8000adc <MX_GPIO_Init+0x1a4>)
 8000a34:	f001 fdb0 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4820      	ldr	r0, [pc, #128]	; (8000ad0 <MX_GPIO_Init+0x198>)
 8000a4e:	f001 fda3 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a52:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4819      	ldr	r0, [pc, #100]	; (8000ad0 <MX_GPIO_Init+0x198>)
 8000a6c:	f001 fd94 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a70:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <MX_GPIO_Init+0x19c>)
 8000a8a:	f001 fd85 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000aa6:	f001 fd77 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000abe:	f001 fd6b 	bl	8002598 <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48001400 	.word	0x48001400
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	48001800 	.word	0x48001800
 8000adc:	48000800 	.word	0x48000800

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_MspInit+0x44>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	; 0x60
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0ae      	sub	sp, #184	; 0xb8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	2294      	movs	r2, #148	; 0x94
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f005 f943 	bl	8005de0 <memset>
  if(hadc->Instance==ADC1)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a2b      	ldr	r2, [pc, #172]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d14e      	bne.n	8000c02 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 ffad 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ba0:	f7ff ff9e 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_ADC_MspInit+0xdc>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_ADC_MspInit+0xdc>)
 8000baa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_ADC_MspInit+0xdc>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_ADC_MspInit+0xdc>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <HAL_ADC_MspInit+0xdc>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_ADC_MspInit+0xdc>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bda:	230b      	movs	r3, #11
 8000bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <HAL_ADC_MspInit+0xe0>)
 8000bee:	f001 fcd3 	bl	8002598 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2012      	movs	r0, #18
 8000bf8:	f001 fc97 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000bfc:	2012      	movs	r0, #18
 8000bfe:	f001 fcb0 	bl	8002562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	37b8      	adds	r7, #184	; 0xb8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	50040000 	.word	0x50040000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000800 	.word	0x48000800

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0b0      	sub	sp, #192	; 0xc0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0318 	add.w	r3, r7, #24
 8000c34:	2294      	movs	r2, #148	; 0x94
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 f8d1 	bl	8005de0 <memset>
  if(huart->Instance==LPUART1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a43      	ldr	r2, [pc, #268]	; (8000d50 <HAL_UART_MspInit+0x138>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d13e      	bne.n	8000cc6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 ff4d 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c60:	f7ff ff3e 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c64:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c68:	4a3a      	ldr	r2, [pc, #232]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c70:	4b38      	ldr	r3, [pc, #224]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7c:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c88:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000c94:	f002 f846 	bl	8002d24 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000c98:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4826      	ldr	r0, [pc, #152]	; (8000d58 <HAL_UART_MspInit+0x140>)
 8000cc0:	f001 fc6a 	bl	8002598 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cc4:	e040      	b.n	8000d48 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a24      	ldr	r2, [pc, #144]	; (8000d5c <HAL_UART_MspInit+0x144>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d13b      	bne.n	8000d48 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 ff09 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000ce8:	f7ff fefa 	bl	8000ae0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf0:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_UART_MspInit+0x13c>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d36:	2307      	movs	r3, #7
 8000d38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d40:	4619      	mov	r1, r3
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <HAL_UART_MspInit+0x148>)
 8000d44:	f001 fc28 	bl	8002598 <HAL_GPIO_Init>
}
 8000d48:	bf00      	nop
 8000d4a:	37c0      	adds	r7, #192	; 0xc0
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40008000 	.word	0x40008000
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48001800 	.word	0x48001800
 8000d5c:	40004800 	.word	0x40004800
 8000d60:	48000c00 	.word	0x48000c00

08000d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_SPI_MspInit+0x7c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d128      	bne.n	8000dd8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a16      	ldr	r2, [pc, #88]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000db6:	23e0      	movs	r3, #224	; 0xe0
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f001 fbe0 	bl	8002598 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_TIM_Base_MspInit+0x38>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10b      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40000800 	.word	0x40000800
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b0      	sub	sp, #192	; 0xc0
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	2294      	movs	r2, #148	; 0x94
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 ffc9 	bl	8005de0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e56:	d16c      	bne.n	8000f32 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 fe43 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e74:	f7ff fe34 	bl	8000ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	4a2f      	ldr	r2, [pc, #188]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e90:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eaa:	230a      	movs	r3, #10
 8000eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f001 fb6d 	bl	8002598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000edc:	f001 fb5c 	bl	8002598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d114      	bne.n	8000f2e <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000f1c:	f001 fef2 	bl	8002d04 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <HAL_PCD_MspInit+0x114>)
 8000f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f2c:	e001      	b.n	8000f32 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000f2e:	f001 fee9 	bl	8002d04 <HAL_PWREx_EnableVddUSB>
}
 8000f32:	bf00      	nop
 8000f34:	37c0      	adds	r7, #192	; 0xc0
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f89c 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <ADC1_IRQHandler+0x10>)
 8000f9a:	f000 fbeb 	bl	8001774 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000028 	.word	0x20000028

08000fa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	; (800100c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <LoopForever+0xe>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	; (8001018 <LoopForever+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f004 fecd 	bl	8005d98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ffe:	f7ff fa7f 	bl	8000500 <main>

08001002 <LoopForever>:

LoopForever:
    b LoopForever
 8001002:	e7fe      	b.n	8001002 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001004:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001010:	08005e88 	.word	0x08005e88
  ldr r2, =_sbss
 8001014:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001018:	20000770 	.word	0x20000770

0800101c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800101c:	e7fe      	b.n	800101c <CAN1_RX0_IRQHandler>

0800101e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f001 fa73 	bl	8002514 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f80e 	bl	8001050 <HAL_InitTick>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	e001      	b.n	8001044 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001040:	f7ff fd54 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001044:	79fb      	ldrb	r3, [r7, #7]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d023      	beq.n	80010ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_InitTick+0x70>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_InitTick+0x6c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f001 fa7f 	bl	800257e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10f      	bne.n	80010a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d809      	bhi.n	80010a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001094:	f001 fa49 	bl	800252a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_InitTick+0x74>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e007      	b.n	80010b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e004      	b.n	80010b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e001      	b.n	80010b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	2000076c 	.word	0x2000076c

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000076c 	.word	0x2000076c

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008

08001150 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	609a      	str	r2, [r3, #8]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3360      	adds	r3, #96	; 0x60
 80011ca:	461a      	mov	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <LL_ADC_SetOffset+0x44>)
 80011da:	4013      	ands	r3, r2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	4313      	orrs	r3, r2
 80011e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	03fff000 	.word	0x03fff000

08001200 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3360      	adds	r3, #96	; 0x60
 800120e:	461a      	mov	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3360      	adds	r3, #96	; 0x60
 800123c:	461a      	mov	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	431a      	orrs	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001256:	bf00      	nop
 8001258:	371c      	adds	r7, #28
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	615a      	str	r2, [r3, #20]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b087      	sub	sp, #28
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3330      	adds	r3, #48	; 0x30
 80012be:	461a      	mov	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	4413      	add	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	211f      	movs	r1, #31
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	401a      	ands	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	0e9b      	lsrs	r3, r3, #26
 80012e6:	f003 011f 	and.w	r1, r3, #31
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	431a      	orrs	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012fa:	bf00      	nop
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3314      	adds	r3, #20
 800133c:	461a      	mov	r2, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	0e5b      	lsrs	r3, r3, #25
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	4413      	add	r3, r2
 800134a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	0d1b      	lsrs	r3, r3, #20
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	2107      	movs	r1, #7
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	401a      	ands	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	0d1b      	lsrs	r3, r3, #20
 8001366:	f003 031f 	and.w	r3, r3, #31
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	431a      	orrs	r2, r3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001376:	bf00      	nop
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0318 	and.w	r3, r3, #24
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013a8:	40d9      	lsrs	r1, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	400b      	ands	r3, r1
 80013ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	0007ffff 	.word	0x0007ffff

080013cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6093      	str	r3, [r2, #8]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001404:	d101      	bne.n	800140a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800142c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001454:	d101      	bne.n	800145a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <LL_ADC_IsEnabled+0x18>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <LL_ADC_IsEnabled+0x1a>
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d101      	bne.n	80014a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d101      	bne.n	80014cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e12f      	b.n	8001756 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fb15 	bl	8000b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff67 	bl	80013f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff4d 	bl	80013cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff82 	bl	8001440 <LL_ADC_IsInternalRegulatorEnabled>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d115      	bne.n	800156e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff66 	bl	8001418 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800154c:	4b84      	ldr	r3, [pc, #528]	; (8001760 <HAL_ADC_Init+0x284>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	4a84      	ldr	r2, [pc, #528]	; (8001764 <HAL_ADC_Init+0x288>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	3301      	adds	r3, #1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001560:	e002      	b.n	8001568 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3b01      	subs	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f9      	bne.n	8001562 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff64 	bl	8001440 <LL_ADC_IsInternalRegulatorEnabled>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10d      	bne.n	800159a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	f043 0210 	orr.w	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff75 	bl	800148e <LL_ADC_REG_IsConversionOngoing>
 80015a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 80c8 	bne.w	8001744 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f040 80c4 	bne.w	8001744 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015c4:	f043 0202 	orr.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff49 	bl	8001468 <LL_ADC_IsEnabled>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10b      	bne.n	80015f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015dc:	4862      	ldr	r0, [pc, #392]	; (8001768 <HAL_ADC_Init+0x28c>)
 80015de:	f7ff ff43 	bl	8001468 <LL_ADC_IsEnabled>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d105      	bne.n	80015f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4619      	mov	r1, r3
 80015ee:	485f      	ldr	r0, [pc, #380]	; (800176c <HAL_ADC_Init+0x290>)
 80015f0:	f7ff fdae 	bl	8001150 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e5b      	ldrb	r3, [r3, #25]
 80015f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001604:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800160a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001612:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	3b01      	subs	r3, #1
 8001628:	045b      	lsls	r3, r3, #17
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_ADC_Init+0x294>)
 8001654:	4013      	ands	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	430b      	orrs	r3, r1
 800165e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff12 	bl	800148e <LL_ADC_REG_IsConversionOngoing>
 800166a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff1f 	bl	80014b4 <LL_ADC_INJ_IsConversionOngoing>
 8001676:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d140      	bne.n	8001700 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d13d      	bne.n	8001700 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7e1b      	ldrb	r3, [r3, #24]
 800168c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800168e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001696:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016a6:	f023 0306 	bic.w	r3, r3, #6
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	69b9      	ldr	r1, [r7, #24]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d118      	bne.n	80016f0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016d4:	4311      	orrs	r1, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016e0:	430a      	orrs	r2, r1
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0201 	orr.w	r2, r2, #1
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	e007      	b.n	8001700 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10c      	bne.n	8001722 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f023 010f 	bic.w	r1, r3, #15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	1e5a      	subs	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
 8001720:	e007      	b.n	8001732 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 020f 	bic.w	r2, r2, #15
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	f043 0201 	orr.w	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	659a      	str	r2, [r3, #88]	; 0x58
 8001742:	e007      	b.n	8001754 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f043 0210 	orr.w	r2, r3, #16
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001754:	7ffb      	ldrb	r3, [r7, #31]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000000 	.word	0x20000000
 8001764:	053e2d63 	.word	0x053e2d63
 8001768:	50040000 	.word	0x50040000
 800176c:	50040300 	.word	0x50040300
 8001770:	fff0c007 	.word	0xfff0c007

08001774 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d017      	beq.n	80017ca <HAL_ADC_IRQHandler+0x56>
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d012      	beq.n	80017ca <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fdcf 	bl	8002360 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2202      	movs	r2, #2
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_ADC_IRQHandler+0x6a>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d05e      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d059      	beq.n	80018a6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fd3a 	bl	8001288 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03e      	beq.n	8001898 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d135      	bne.n	8001898 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b08      	cmp	r3, #8
 8001838:	d12e      	bne.n	8001898 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fe25 	bl	800148e <LL_ADC_REG_IsConversionOngoing>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d11a      	bne.n	8001880 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 020c 	bic.w	r2, r2, #12
 8001858:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d112      	bne.n	8001898 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	659a      	str	r2, [r3, #88]	; 0x58
 800187e:	e00b      	b.n	8001898 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f043 0210 	orr.w	r2, r3, #16
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f91f 	bl	8001adc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_ADC_IRQHandler+0x146>
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d072      	beq.n	80019aa <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d06d      	beq.n	80019aa <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fd0b 	bl	8001306 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80018f0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fcc6 	bl	8001288 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018fc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d047      	beq.n	800199c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_ADC_IRQHandler+0x1b2>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03f      	beq.n	800199c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d13a      	bne.n	800199c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001930:	2b40      	cmp	r3, #64	; 0x40
 8001932:	d133      	bne.n	800199c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d12e      	bne.n	800199c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fdb6 	bl	80014b4 <LL_ADC_INJ_IsConversionOngoing>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d11a      	bne.n	8001984 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800195c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d112      	bne.n	800199c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	659a      	str	r2, [r3, #88]	; 0x58
 8001982:	e00b      	b.n	800199c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f043 0210 	orr.w	r2, r3, #16
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fcb7 	bl	8002310 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2260      	movs	r2, #96	; 0x60
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d011      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x264>
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f890 	bl	8001af0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d012      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x294>
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00d      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fc9d 	bl	8002338 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d012      	beq.n	8001a38 <HAL_ADC_IRQHandler+0x2c4>
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 fc8f 	bl	800234c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d02a      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x324>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d025      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001a54:	2301      	movs	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	e008      	b.n	8001a6c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d10e      	bne.n	8001a90 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f83a 	bl	8001b04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2210      	movs	r2, #16
 8001a96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d018      	beq.n	8001ad4 <HAL_ADC_IRQHandler+0x360>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	f043 0208 	orr.w	r2, r3, #8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001acc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fc28 	bl	8002324 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0b6      	sub	sp, #216	; 0xd8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x22>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e3d5      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x7ce>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fca1 	bl	800148e <LL_ADC_REG_IsConversionOngoing>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 83ba 	bne.w	80022c8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d824      	bhi.n	8001ba6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	3b02      	subs	r3, #2
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d81b      	bhi.n	8001b9e <HAL_ADC_ConfigChannel+0x86>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_ADC_ConfigChannel+0x54>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001b85 	.word	0x08001b85
 8001b74:	08001b8d 	.word	0x08001b8d
 8001b78:	08001b95 	.word	0x08001b95
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	220c      	movs	r2, #12
 8001b80:	605a      	str	r2, [r3, #4]
          break;
 8001b82:	e011      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2212      	movs	r2, #18
 8001b88:	605a      	str	r2, [r3, #4]
          break;
 8001b8a:	e00d      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2218      	movs	r2, #24
 8001b90:	605a      	str	r2, [r3, #4]
          break;
 8001b92:	e009      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9a:	605a      	str	r2, [r3, #4]
          break;
 8001b9c:	e004      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2206      	movs	r2, #6
 8001ba2:	605a      	str	r2, [r3, #4]
          break;
 8001ba4:	e000      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ba6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f7ff fb7a 	bl	80012ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fc65 	bl	800148e <LL_ADC_REG_IsConversionOngoing>
 8001bc4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fc71 	bl	80014b4 <LL_ADC_INJ_IsConversionOngoing>
 8001bd2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 81c1 	bne.w	8001f62 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 81bc 	bne.w	8001f62 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bf2:	d10f      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7ff fb94 	bl	800132c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fb28 	bl	8001262 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c12:	e00e      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	461a      	mov	r2, r3
 8001c22:	f7ff fb83 	bl	800132c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fb18 	bl	8001262 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d00a      	beq.n	8001c6a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6919      	ldr	r1, [r3, #16]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c64:	f7ff faa8 	bl	80011b8 <LL_ADC_SetOffset>
 8001c68:	e17b      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fac5 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10a      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x17e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff faba 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	0e9b      	lsrs	r3, r3, #26
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	e01e      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x1bc>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff faaf 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	e004      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d105      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1d4>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0e9b      	lsrs	r3, r3, #26
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	e018      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x206>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e004      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001d14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d106      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fa7e 	bl	800122c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fa62 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x244>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fa57 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	0e9b      	lsrs	r3, r3, #26
 8001d56:	f003 021f 	and.w	r2, r3, #31
 8001d5a:	e01e      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x282>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fa4c 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	e004      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001d8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x29a>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	0e9b      	lsrs	r3, r3, #26
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	e018      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x2cc>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001dc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e004      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001dda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fa1b 	bl	800122c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f9ff 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x30a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2102      	movs	r1, #2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f9f4 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	e01e      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x348>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2102      	movs	r1, #2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f9e9 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e004      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x360>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	e016      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x38e>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	e004      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d106      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f9ba 	bl	800122c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f99e 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x3cc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2103      	movs	r1, #3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f993 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	f003 021f 	and.w	r2, r3, #31
 8001ee2:	e017      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x3fc>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2103      	movs	r1, #3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f988 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001efe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001f06:	2320      	movs	r3, #32
 8001f08:	e003      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x414>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	e011      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x438>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e003      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d106      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff f965 	bl	800122c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa7e 	bl	8001468 <LL_ADC_IsEnabled>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8140 	bne.w	80021f4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6819      	ldr	r1, [r3, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	461a      	mov	r2, r3
 8001f82:	f7ff f9ff 	bl	8001384 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4a8f      	ldr	r2, [pc, #572]	; (80021c8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	f040 8131 	bne.w	80021f4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10b      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x4a2>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2b09      	cmp	r3, #9
 8001fb0:	bf94      	ite	ls
 8001fb2:	2301      	movls	r3, #1
 8001fb4:	2300      	movhi	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	e019      	b.n	8001fee <HAL_ADC_ConfigChannel+0x4d6>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001fc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fca:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e003      	b.n	8001fde <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	bf94      	ite	ls
 8001fe8:	2301      	movls	r3, #1
 8001fea:	2300      	movhi	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d079      	beq.n	80020e6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d107      	bne.n	800200e <HAL_ADC_ConfigChannel+0x4f6>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0e9b      	lsrs	r3, r3, #26
 8002004:	3301      	adds	r3, #1
 8002006:	069b      	lsls	r3, r3, #26
 8002008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200c:	e015      	b.n	800203a <HAL_ADC_ConfigChannel+0x522>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800201c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e003      	b.n	8002032 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3301      	adds	r3, #1
 8002034:	069b      	lsls	r3, r3, #26
 8002036:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_ADC_ConfigChannel+0x542>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	3301      	adds	r3, #1
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	e017      	b.n	800208a <HAL_ADC_ConfigChannel+0x572>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800206c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002072:	2320      	movs	r3, #32
 8002074:	e003      	b.n	800207e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	3301      	adds	r3, #1
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	ea42 0103 	orr.w	r1, r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10a      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x598>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0e9b      	lsrs	r3, r3, #26
 80020a0:	3301      	adds	r3, #1
 80020a2:	f003 021f 	and.w	r2, r3, #31
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	051b      	lsls	r3, r3, #20
 80020ae:	e018      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x5ca>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80020c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e003      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80020cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	f003 021f 	and.w	r2, r3, #31
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e2:	430b      	orrs	r3, r1
 80020e4:	e081      	b.n	80021ea <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d107      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x5ea>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0e9b      	lsrs	r3, r3, #26
 80020f8:	3301      	adds	r3, #1
 80020fa:	069b      	lsls	r3, r3, #26
 80020fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002100:	e015      	b.n	800212e <HAL_ADC_ConfigChannel+0x616>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800211a:	2320      	movs	r3, #32
 800211c:	e003      	b.n	8002126 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	3301      	adds	r3, #1
 8002128:	069b      	lsls	r3, r3, #26
 800212a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_ADC_ConfigChannel+0x636>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0e9b      	lsrs	r3, r3, #26
 8002140:	3301      	adds	r3, #1
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	e017      	b.n	800217e <HAL_ADC_ConfigChannel+0x666>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	61fb      	str	r3, [r7, #28]
  return result;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002166:	2320      	movs	r3, #32
 8002168:	e003      	b.n	8002172 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2101      	movs	r1, #1
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	ea42 0103 	orr.w	r1, r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10d      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x692>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	3301      	adds	r3, #1
 8002196:	f003 021f 	and.w	r2, r3, #31
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	3b1e      	subs	r3, #30
 80021a2:	051b      	lsls	r3, r3, #20
 80021a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a8:	e01e      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x6d0>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	613b      	str	r3, [r7, #16]
  return result;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d104      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e006      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x6bc>
 80021c6:	bf00      	nop
 80021c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	f003 021f 	and.w	r2, r3, #31
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	3b1e      	subs	r3, #30
 80021e2:	051b      	lsls	r3, r3, #20
 80021e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e8:	430b      	orrs	r3, r1
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	6892      	ldr	r2, [r2, #8]
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7ff f89c 	bl	800132c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_ADC_ConfigChannel+0x7d8>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d06c      	beq.n	80022da <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002200:	483c      	ldr	r0, [pc, #240]	; (80022f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002202:	f7fe ffcb 	bl	800119c <LL_ADC_GetCommonPathInternalCh>
 8002206:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a3a      	ldr	r2, [pc, #232]	; (80022f8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d127      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d121      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a35      	ldr	r2, [pc, #212]	; (80022fc <HAL_ADC_ConfigChannel+0x7e4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d157      	bne.n	80022da <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800222a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800222e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002232:	4619      	mov	r1, r3
 8002234:	482f      	ldr	r0, [pc, #188]	; (80022f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002236:	f7fe ff9e 	bl	8001176 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_ADC_ConfigChannel+0x7e8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	4a30      	ldr	r2, [pc, #192]	; (8002304 <HAL_ADC_ConfigChannel+0x7ec>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002254:	e002      	b.n	800225c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3b01      	subs	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002262:	e03a      	b.n	80022da <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a27      	ldr	r2, [pc, #156]	; (8002308 <HAL_ADC_ConfigChannel+0x7f0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d113      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x77e>
 800226e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <HAL_ADC_ConfigChannel+0x7e4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d12a      	bne.n	80022da <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228c:	4619      	mov	r1, r3
 800228e:	4819      	ldr	r0, [pc, #100]	; (80022f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002290:	f7fe ff71 	bl	8001176 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002294:	e021      	b.n	80022da <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1c      	ldr	r2, [pc, #112]	; (800230c <HAL_ADC_ConfigChannel+0x7f4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d11c      	bne.n	80022da <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d116      	bne.n	80022da <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_ADC_ConfigChannel+0x7e4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d111      	bne.n	80022da <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022be:	4619      	mov	r1, r3
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <HAL_ADC_ConfigChannel+0x7dc>)
 80022c2:	f7fe ff58 	bl	8001176 <LL_ADC_SetCommonPathInternalCh>
 80022c6:	e008      	b.n	80022da <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80022e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	37d8      	adds	r7, #216	; 0xd8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	80080000 	.word	0x80080000
 80022f4:	50040300 	.word	0x50040300
 80022f8:	c7520000 	.word	0xc7520000
 80022fc:	50040000 	.word	0x50040000
 8002300:	20000000 	.word	0x20000000
 8002304:	053e2d63 	.word	0x053e2d63
 8002308:	cb840000 	.word	0xcb840000
 800230c:	80000001 	.word	0x80000001

08002310 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <__NVIC_EnableIRQ+0x38>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e100 	.word	0xe000e100

08002414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db0a      	blt.n	800243e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	490c      	ldr	r1, [pc, #48]	; (8002460 <__NVIC_SetPriority+0x4c>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	440b      	add	r3, r1
 8002438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800243c:	e00a      	b.n	8002454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <__NVIC_SetPriority+0x50>)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3b04      	subs	r3, #4
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	440b      	add	r3, r1
 8002452:	761a      	strb	r2, [r3, #24]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f1c3 0307 	rsb	r3, r3, #7
 8002482:	2b04      	cmp	r3, #4
 8002484:	bf28      	it	cs
 8002486:	2304      	movcs	r3, #4
 8002488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3304      	adds	r3, #4
 800248e:	2b06      	cmp	r3, #6
 8002490:	d902      	bls.n	8002498 <NVIC_EncodePriority+0x30>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3b03      	subs	r3, #3
 8002496:	e000      	b.n	800249a <NVIC_EncodePriority+0x32>
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	4313      	orrs	r3, r2
         );
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e0:	d301      	bcc.n	80024e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <SysTick_Config+0x40>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ee:	210f      	movs	r1, #15
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f4:	f7ff ff8e 	bl	8002414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <SysTick_Config+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <SysTick_Config+0x40>)
 8002500:	2207      	movs	r2, #7
 8002502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff29 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800253c:	f7ff ff3e 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f7ff ff8e 	bl	8002468 <NVIC_EncodePriority>
 800254c:	4602      	mov	r2, r0
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff5d 	bl	8002414 <__NVIC_SetPriority>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff31 	bl	80023d8 <__NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffa2 	bl	80024d0 <SysTick_Config>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a6:	e166      	b.n	8002876 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8158 	beq.w	8002870 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d005      	beq.n	80025d8 <HAL_GPIO_Init+0x40>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d130      	bne.n	800263a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800260e:	2201      	movs	r2, #1
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f003 0201 	and.w	r2, r3, #1
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b03      	cmp	r3, #3
 8002644:	d017      	beq.n	8002676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	2203      	movs	r2, #3
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d123      	bne.n	80026ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	220f      	movs	r2, #15
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	08da      	lsrs	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3208      	adds	r2, #8
 80026c4:	6939      	ldr	r1, [r7, #16]
 80026c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2203      	movs	r2, #3
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0203 	and.w	r2, r3, #3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80b2 	beq.w	8002870 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270c:	4b61      	ldr	r3, [pc, #388]	; (8002894 <HAL_GPIO_Init+0x2fc>)
 800270e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002710:	4a60      	ldr	r2, [pc, #384]	; (8002894 <HAL_GPIO_Init+0x2fc>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6613      	str	r3, [r2, #96]	; 0x60
 8002718:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <HAL_GPIO_Init+0x2fc>)
 800271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002724:	4a5c      	ldr	r2, [pc, #368]	; (8002898 <HAL_GPIO_Init+0x300>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800274e:	d02b      	beq.n	80027a8 <HAL_GPIO_Init+0x210>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_GPIO_Init+0x304>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d025      	beq.n	80027a4 <HAL_GPIO_Init+0x20c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a51      	ldr	r2, [pc, #324]	; (80028a0 <HAL_GPIO_Init+0x308>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d01f      	beq.n	80027a0 <HAL_GPIO_Init+0x208>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a50      	ldr	r2, [pc, #320]	; (80028a4 <HAL_GPIO_Init+0x30c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d019      	beq.n	800279c <HAL_GPIO_Init+0x204>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a4f      	ldr	r2, [pc, #316]	; (80028a8 <HAL_GPIO_Init+0x310>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_GPIO_Init+0x200>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a4e      	ldr	r2, [pc, #312]	; (80028ac <HAL_GPIO_Init+0x314>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00d      	beq.n	8002794 <HAL_GPIO_Init+0x1fc>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a4d      	ldr	r2, [pc, #308]	; (80028b0 <HAL_GPIO_Init+0x318>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <HAL_GPIO_Init+0x1f8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a4c      	ldr	r2, [pc, #304]	; (80028b4 <HAL_GPIO_Init+0x31c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_GPIO_Init+0x1f4>
 8002788:	2307      	movs	r3, #7
 800278a:	e00e      	b.n	80027aa <HAL_GPIO_Init+0x212>
 800278c:	2308      	movs	r3, #8
 800278e:	e00c      	b.n	80027aa <HAL_GPIO_Init+0x212>
 8002790:	2306      	movs	r3, #6
 8002792:	e00a      	b.n	80027aa <HAL_GPIO_Init+0x212>
 8002794:	2305      	movs	r3, #5
 8002796:	e008      	b.n	80027aa <HAL_GPIO_Init+0x212>
 8002798:	2304      	movs	r3, #4
 800279a:	e006      	b.n	80027aa <HAL_GPIO_Init+0x212>
 800279c:	2303      	movs	r3, #3
 800279e:	e004      	b.n	80027aa <HAL_GPIO_Init+0x212>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e002      	b.n	80027aa <HAL_GPIO_Init+0x212>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_GPIO_Init+0x212>
 80027a8:	2300      	movs	r3, #0
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	f002 0203 	and.w	r2, r2, #3
 80027b0:	0092      	lsls	r2, r2, #2
 80027b2:	4093      	lsls	r3, r2
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027ba:	4937      	ldr	r1, [pc, #220]	; (8002898 <HAL_GPIO_Init+0x300>)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c8:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_GPIO_Init+0x320>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027ec:	4a32      	ldr	r2, [pc, #200]	; (80028b8 <HAL_GPIO_Init+0x320>)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_GPIO_Init+0x320>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002816:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <HAL_GPIO_Init+0x320>)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800281c:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_GPIO_Init+0x320>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002840:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_GPIO_Init+0x320>)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_GPIO_Init+0x320>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_GPIO_Init+0x320>)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	f47f ae91 	bne.w	80025a8 <HAL_GPIO_Init+0x10>
  }
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40021000 	.word	0x40021000
 8002898:	40010000 	.word	0x40010000
 800289c:	48000400 	.word	0x48000400
 80028a0:	48000800 	.word	0x48000800
 80028a4:	48000c00 	.word	0x48000c00
 80028a8:	48001000 	.word	0x48001000
 80028ac:	48001400 	.word	0x48001400
 80028b0:	48001800 	.word	0x48001800
 80028b4:	48001c00 	.word	0x48001c00
 80028b8:	40010400 	.word	0x40010400

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028d8:	e002      	b.n	80028e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ee:	b08f      	sub	sp, #60	; 0x3c
 80028f0:	af0a      	add	r7, sp, #40	; 0x28
 80028f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e116      	b.n	8002b2c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7fe fa85 	bl	8000e28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2203      	movs	r2, #3
 8002922:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f002 ffa1 	bl	8005884 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	687e      	ldr	r6, [r7, #4]
 800294a:	466d      	mov	r5, sp
 800294c:	f106 0410 	add.w	r4, r6, #16
 8002950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002958:	e894 0003 	ldmia.w	r4, {r0, r1}
 800295c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002960:	1d33      	adds	r3, r6, #4
 8002962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002964:	6838      	ldr	r0, [r7, #0]
 8002966:	f002 ff61 	bl	800582c <USB_CoreInit>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0d7      	b.n	8002b2c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f002 ff8f 	bl	80058a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
 800298c:	e04a      	b.n	8002a24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	333d      	adds	r3, #61	; 0x3d
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	333c      	adds	r3, #60	; 0x3c
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	b298      	uxth	r0, r3
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3344      	adds	r3, #68	; 0x44
 80029ca:	4602      	mov	r2, r0
 80029cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3340      	adds	r3, #64	; 0x40
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3348      	adds	r3, #72	; 0x48
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	334c      	adds	r3, #76	; 0x4c
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3354      	adds	r3, #84	; 0x54
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	3301      	adds	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d3af      	bcc.n	800298e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
 8002a32:	e044      	b.n	8002abe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	3301      	adds	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d3b5      	bcc.n	8002a34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	687e      	ldr	r6, [r7, #4]
 8002ad0:	466d      	mov	r5, sp
 8002ad2:	f106 0410 	add.w	r4, r6, #16
 8002ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ade:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae6:	1d33      	adds	r3, r6, #4
 8002ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aea:	6838      	ldr	r0, [r7, #0]
 8002aec:	f002 ff28 	bl	8005940 <USB_DevInit>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e014      	b.n	8002b2c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d102      	bne.n	8002b20 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f80a 	bl	8002b34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 f8d4 	bl	8005cd2 <USB_DevDisconnect>

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b66:	f043 0303 	orr.w	r3, r3, #3
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b80:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8c:	d102      	bne.n	8002b94 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b92:	e00b      	b.n	8002bac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba2:	d102      	bne.n	8002baa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba8:	e000      	b.n	8002bac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002baa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40007000 	.word	0x40007000

08002bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d141      	bne.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bca:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d131      	bne.n	8002c3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bd8:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bde:	4a46      	ldr	r2, [pc, #280]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be8:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bf0:	4a41      	ldr	r2, [pc, #260]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002bf8:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2232      	movs	r2, #50	; 0x32
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	4a3f      	ldr	r2, [pc, #252]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	0c9b      	lsrs	r3, r3, #18
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0e:	e002      	b.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c22:	d102      	bne.n	8002c2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f2      	bne.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c2a:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c36:	d158      	bne.n	8002cea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e057      	b.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c42:	4a2d      	ldr	r2, [pc, #180]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c4c:	e04d      	b.n	8002cea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c54:	d141      	bne.n	8002cda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c56:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d131      	bne.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6a:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c7c:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2232      	movs	r2, #50	; 0x32
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	0c9b      	lsrs	r3, r3, #18
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c9a:	e002      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cae:	d102      	bne.n	8002cb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f2      	bne.n	8002c9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc2:	d112      	bne.n	8002cea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e011      	b.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cd8:	e007      	b.n	8002cea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ce8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	431bde83 	.word	0x431bde83

08002d04 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d12:	6053      	str	r3, [r2, #4]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40007000 	.word	0x40007000

08002d24 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d32:	6053      	str	r3, [r2, #4]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40007000 	.word	0x40007000

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f000 bc08 	b.w	8003568 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d58:	4b96      	ldr	r3, [pc, #600]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d62:	4b94      	ldr	r3, [pc, #592]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80e4 	beq.w	8002f42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <HAL_RCC_OscConfig+0x4c>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	f040 808b 	bne.w	8002e9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	f040 8087 	bne.w	8002e9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d90:	4b88      	ldr	r3, [pc, #544]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_OscConfig+0x64>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e3df      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	4b81      	ldr	r3, [pc, #516]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x7e>
 8002db8:	4b7e      	ldr	r3, [pc, #504]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc0:	e005      	b.n	8002dce <HAL_RCC_OscConfig+0x8a>
 8002dc2:	4b7c      	ldr	r3, [pc, #496]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d223      	bcs.n	8002e1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fdcc 	bl	8003974 <RCC_SetFlashLatencyFromMSIRange>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e3c0      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de6:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a72      	ldr	r2, [pc, #456]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002dec:	f043 0308 	orr.w	r3, r3, #8
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	496d      	ldr	r1, [pc, #436]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e04:	4b6b      	ldr	r3, [pc, #428]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	4968      	ldr	r1, [pc, #416]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
 8002e18:	e025      	b.n	8002e66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1a:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a65      	ldr	r2, [pc, #404]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e20:	f043 0308 	orr.w	r3, r3, #8
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4960      	ldr	r1, [pc, #384]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e38:	4b5e      	ldr	r3, [pc, #376]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	495b      	ldr	r1, [pc, #364]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fd8c 	bl	8003974 <RCC_SetFlashLatencyFromMSIRange>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e380      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e66:	f000 fcc1 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	4950      	ldr	r1, [pc, #320]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a4e      	ldr	r2, [pc, #312]	; (8002fbc <HAL_RCC_OscConfig+0x278>)
 8002e84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e86:	4b4e      	ldr	r3, [pc, #312]	; (8002fc0 <HAL_RCC_OscConfig+0x27c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe f8e0 	bl	8001050 <HAL_InitTick>
 8002e90:	4603      	mov	r3, r0
 8002e92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d052      	beq.n	8002f40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	e364      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d032      	beq.n	8002f0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ea6:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a42      	ldr	r2, [pc, #264]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe f91d 	bl	80010f0 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eba:	f7fe f919 	bl	80010f0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e34d      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ecc:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a35      	ldr	r2, [pc, #212]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4930      	ldr	r1, [pc, #192]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	492b      	ldr	r1, [pc, #172]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
 8002f0a:	e01a      	b.n	8002f42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f18:	f7fe f8ea 	bl	80010f0 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f20:	f7fe f8e6 	bl	80010f0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e31a      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1dc>
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d073      	beq.n	8003036 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_OscConfig+0x21c>
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d10e      	bne.n	8002f78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d10b      	bne.n	8002f78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d063      	beq.n	8003034 <HAL_RCC_OscConfig+0x2f0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d15f      	bne.n	8003034 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e2f7      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d106      	bne.n	8002f90 <HAL_RCC_OscConfig+0x24c>
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e025      	b.n	8002fdc <HAL_RCC_OscConfig+0x298>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f98:	d114      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x280>
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a05      	ldr	r2, [pc, #20]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a02      	ldr	r2, [pc, #8]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e013      	b.n	8002fdc <HAL_RCC_OscConfig+0x298>
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08005e08 	.word	0x08005e08
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000004 	.word	0x20000004
 8002fc4:	4ba0      	ldr	r3, [pc, #640]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a9f      	ldr	r2, [pc, #636]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b9d      	ldr	r3, [pc, #628]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a9c      	ldr	r2, [pc, #624]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8002fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fe f884 	bl	80010f0 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe f880 	bl	80010f0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e2b4      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffe:	4b92      	ldr	r3, [pc, #584]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x2a8>
 800300a:	e014      	b.n	8003036 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe f870 	bl	80010f0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003014:	f7fe f86c 	bl	80010f0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e2a0      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003026:	4b88      	ldr	r3, [pc, #544]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x2d0>
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d060      	beq.n	8003104 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b04      	cmp	r3, #4
 8003046:	d005      	beq.n	8003054 <HAL_RCC_OscConfig+0x310>
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d119      	bne.n	8003082 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d116      	bne.n	8003082 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003054:	4b7c      	ldr	r3, [pc, #496]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_OscConfig+0x328>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e27d      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	4973      	ldr	r1, [pc, #460]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003080:	e040      	b.n	8003104 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d023      	beq.n	80030d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308a:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fe f82b 	bl	80010f0 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fe f827 	bl	80010f0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e25b      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b0:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b62      	ldr	r3, [pc, #392]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	495f      	ldr	r1, [pc, #380]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
 80030d0:	e018      	b.n	8003104 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d2:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a5c      	ldr	r2, [pc, #368]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 80030d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fe f807 	bl	80010f0 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fe f803 	bl	80010f0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e237      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d03c      	beq.n	800318a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01c      	beq.n	8003152 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003118:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311e:	4a4a      	ldr	r2, [pc, #296]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fd ffe2 	bl	80010f0 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003130:	f7fd ffde 	bl	80010f0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e212      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ef      	beq.n	8003130 <HAL_RCC_OscConfig+0x3ec>
 8003150:	e01b      	b.n	800318a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003158:	4a3b      	ldr	r2, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003162:	f7fd ffc5 	bl	80010f0 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316a:	f7fd ffc1 	bl	80010f0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e1f5      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800317c:	4b32      	ldr	r3, [pc, #200]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1ef      	bne.n	800316a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80a6 	beq.w	80032e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003198:	2300      	movs	r3, #0
 800319a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6593      	str	r3, [r2, #88]	; 0x58
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c0:	2301      	movs	r3, #1
 80031c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_RCC_OscConfig+0x508>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d118      	bne.n	8003202 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031d0:	4b1e      	ldr	r3, [pc, #120]	; (800324c <HAL_RCC_OscConfig+0x508>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <HAL_RCC_OscConfig+0x508>)
 80031d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031dc:	f7fd ff88 	bl	80010f0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e4:	f7fd ff84 	bl	80010f0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1b8      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_RCC_OscConfig+0x508>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_RCC_OscConfig+0x4d8>
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800321a:	e029      	b.n	8003270 <HAL_RCC_OscConfig+0x52c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b05      	cmp	r3, #5
 8003222:	d115      	bne.n	8003250 <HAL_RCC_OscConfig+0x50c>
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	4a03      	ldr	r2, [pc, #12]	; (8003248 <HAL_RCC_OscConfig+0x504>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003244:	e014      	b.n	8003270 <HAL_RCC_OscConfig+0x52c>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
 8003250:	4b9d      	ldr	r3, [pc, #628]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	4a9c      	ldr	r2, [pc, #624]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003260:	4b99      	ldr	r3, [pc, #612]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	4a98      	ldr	r2, [pc, #608]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d016      	beq.n	80032a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fd ff3a 	bl	80010f0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327e:	e00a      	b.n	8003296 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003280:	f7fd ff36 	bl	80010f0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e168      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003296:	4b8c      	ldr	r3, [pc, #560]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ed      	beq.n	8003280 <HAL_RCC_OscConfig+0x53c>
 80032a4:	e015      	b.n	80032d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fd ff23 	bl	80010f0 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fd ff1f 	bl	80010f0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e151      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c4:	4b80      	ldr	r3, [pc, #512]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1ed      	bne.n	80032ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d2:	7ffb      	ldrb	r3, [r7, #31]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d8:	4b7b      	ldr	r3, [pc, #492]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	4a7a      	ldr	r2, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 80032de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03c      	beq.n	800336a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01c      	beq.n	8003332 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032f8:	4b73      	ldr	r3, [pc, #460]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 80032fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032fe:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fd fef2 	bl	80010f0 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003310:	f7fd feee 	bl	80010f0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e122      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003322:	4b69      	ldr	r3, [pc, #420]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ef      	beq.n	8003310 <HAL_RCC_OscConfig+0x5cc>
 8003330:	e01b      	b.n	800336a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003332:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003338:	4a63      	ldr	r2, [pc, #396]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fd fed5 	bl	80010f0 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800334a:	f7fd fed1 	bl	80010f0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e105      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800335c:	4b5a      	ldr	r3, [pc, #360]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 800335e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ef      	bne.n	800334a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80f9 	beq.w	8003566 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	2b02      	cmp	r3, #2
 800337a:	f040 80cf 	bne.w	800351c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800337e:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0203 	and.w	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	429a      	cmp	r2, r3
 8003390:	d12c      	bne.n	80033ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	3b01      	subs	r3, #1
 800339e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d123      	bne.n	80033ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d11b      	bne.n	80033ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d113      	bne.n	80033ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	3b01      	subs	r3, #1
 80033d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d109      	bne.n	80033ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	3b01      	subs	r3, #1
 80033e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d071      	beq.n	80034d0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d068      	beq.n	80034c4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033f2:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033fe:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0ac      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800340e:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2d      	ldr	r2, [pc, #180]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003418:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800341a:	f7fd fe69 	bl	80010f0 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003422:	f7fd fe65 	bl	80010f0 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e099      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003434:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f0      	bne.n	8003422 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <HAL_RCC_OscConfig+0x788>)
 8003446:	4013      	ands	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003450:	3a01      	subs	r2, #1
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	4311      	orrs	r1, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800345a:	0212      	lsls	r2, r2, #8
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003462:	0852      	lsrs	r2, r2, #1
 8003464:	3a01      	subs	r2, #1
 8003466:	0552      	lsls	r2, r2, #21
 8003468:	4311      	orrs	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800346e:	0852      	lsrs	r2, r2, #1
 8003470:	3a01      	subs	r2, #1
 8003472:	0652      	lsls	r2, r2, #25
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800347a:	06d2      	lsls	r2, r2, #27
 800347c:	430a      	orrs	r2, r1
 800347e:	4912      	ldr	r1, [pc, #72]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003480:	4313      	orrs	r3, r2
 8003482:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0f      	ldr	r2, [pc, #60]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 800348a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003490:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 8003496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800349c:	f7fd fe28 	bl	80010f0 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fd fe24 	bl	80010f0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e058      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <HAL_RCC_OscConfig+0x784>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c2:	e050      	b.n	8003566 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e04f      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
 80034c8:	40021000 	.word	0x40021000
 80034cc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d0:	4b27      	ldr	r3, [pc, #156]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d144      	bne.n	8003566 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a23      	ldr	r2, [pc, #140]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e8:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034f4:	f7fd fdfc 	bl	80010f0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fd fdf8 	bl	80010f0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e02c      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350e:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x7b8>
 800351a:	e024      	b.n	8003566 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b0c      	cmp	r3, #12
 8003520:	d01f      	beq.n	8003562 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 8003528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800352c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fd fddf 	bl	80010f0 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd fddb 	bl	80010f0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e00f      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	4905      	ldr	r1, [pc, #20]	; (8003570 <HAL_RCC_OscConfig+0x82c>)
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCC_OscConfig+0x830>)
 800355c:	4013      	ands	r3, r2
 800355e:	60cb      	str	r3, [r1, #12]
 8003560:	e001      	b.n	8003566 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	feeefffc 	.word	0xfeeefffc

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e11d      	b.n	80037cc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b90      	ldr	r3, [pc, #576]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d910      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b8d      	ldr	r3, [pc, #564]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 020f 	bic.w	r2, r3, #15
 80035a6:	498b      	ldr	r1, [pc, #556]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b89      	ldr	r3, [pc, #548]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e105      	b.n	80037cc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d010      	beq.n	80035ee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d8:	429a      	cmp	r2, r3
 80035da:	d908      	bls.n	80035ee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035dc:	4b7e      	ldr	r3, [pc, #504]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	497b      	ldr	r1, [pc, #492]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d079      	beq.n	80036ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d11e      	bne.n	8003640 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003602:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0dc      	b.n	80037cc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003612:	f000 fa09 	bl	8003a28 <RCC_GetSysClockFreqFromPLLSource>
 8003616:	4603      	mov	r3, r0
 8003618:	4a70      	ldr	r2, [pc, #448]	; (80037dc <HAL_RCC_ClockConfig+0x264>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d946      	bls.n	80036ac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800361e:	4b6e      	ldr	r3, [pc, #440]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d140      	bne.n	80036ac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800362a:	4b6b      	ldr	r3, [pc, #428]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003632:	4a69      	ldr	r2, [pc, #420]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e035      	b.n	80036ac <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d107      	bne.n	8003658 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003648:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d115      	bne.n	8003680 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0b9      	b.n	80037cc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d107      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003660:	4b5d      	ldr	r3, [pc, #372]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0ad      	b.n	80037cc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0a5      	b.n	80037cc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003680:	f000 f8b4 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 8003684:	4603      	mov	r3, r0
 8003686:	4a55      	ldr	r2, [pc, #340]	; (80037dc <HAL_RCC_ClockConfig+0x264>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d90f      	bls.n	80036ac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800368c:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003698:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036a0:	4a4d      	ldr	r2, [pc, #308]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036ac:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 0203 	bic.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4947      	ldr	r1, [pc, #284]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036be:	f7fd fd17 	bl	80010f0 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c6:	f7fd fd13 	bl	80010f0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e077      	b.n	80037cc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036dc:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 020c 	and.w	r2, r3, #12
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d1eb      	bne.n	80036c6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b80      	cmp	r3, #128	; 0x80
 80036f2:	d105      	bne.n	8003700 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036f4:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a37      	ldr	r2, [pc, #220]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036fe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003718:	429a      	cmp	r2, r3
 800371a:	d208      	bcs.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	492b      	ldr	r1, [pc, #172]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372e:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d210      	bcs.n	800375e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 020f 	bic.w	r2, r3, #15
 8003744:	4923      	ldr	r1, [pc, #140]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_RCC_ClockConfig+0x25c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d001      	beq.n	800375e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e036      	b.n	80037cc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	4918      	ldr	r1, [pc, #96]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003778:	4313      	orrs	r3, r2
 800377a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4910      	ldr	r1, [pc, #64]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800379c:	f000 f826 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <HAL_RCC_ClockConfig+0x260>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <HAL_RCC_ClockConfig+0x268>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_RCC_ClockConfig+0x26c>)
 80037ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_RCC_ClockConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd fc45 	bl	8001050 <HAL_InitTick>
 80037c6:	4603      	mov	r3, r0
 80037c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40022000 	.word	0x40022000
 80037d8:	40021000 	.word	0x40021000
 80037dc:	04c4b400 	.word	0x04c4b400
 80037e0:	08005e08 	.word	0x08005e08
 80037e4:	20000000 	.word	0x20000000
 80037e8:	20000004 	.word	0x20000004

080037ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fa:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003804:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x34>
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d121      	bne.n	800385e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d11e      	bne.n	800385e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003820:	4b34      	ldr	r3, [pc, #208]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800382c:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800382e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	e005      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800383c:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003848:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003850:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10d      	bne.n	8003874 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d102      	bne.n	800386a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003864:	4b25      	ldr	r3, [pc, #148]	; (80038fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003866:	61bb      	str	r3, [r7, #24]
 8003868:	e004      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d101      	bne.n	8003874 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003870:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_RCC_GetSysClockFreq+0x114>)
 8003872:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d134      	bne.n	80038e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800387a:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0xa6>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d003      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0xac>
 8003890:	e005      	b.n	800389e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003892:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003894:	617b      	str	r3, [r7, #20]
      break;
 8003896:	e005      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <HAL_RCC_GetSysClockFreq+0x114>)
 800389a:	617b      	str	r3, [r7, #20]
      break;
 800389c:	e002      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	617b      	str	r3, [r7, #20]
      break;
 80038a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	3301      	adds	r3, #1
 80038b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	fb03 f202 	mul.w	r2, r3, r2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	0e5b      	lsrs	r3, r3, #25
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	3301      	adds	r3, #1
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038e4:	69bb      	ldr	r3, [r7, #24]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	; 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	08005e20 	.word	0x08005e20
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	007a1200 	.word	0x007a1200

08003904 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_RCC_GetHCLKFreq+0x14>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000000 	.word	0x20000000

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003920:	f7ff fff0 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4904      	ldr	r1, [pc, #16]	; (8003944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	08005e18 	.word	0x08005e18

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800394c:	f7ff ffda 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0adb      	lsrs	r3, r3, #11
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4904      	ldr	r1, [pc, #16]	; (8003970 <HAL_RCC_GetPCLK2Freq+0x28>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	08005e18 	.word	0x08005e18

08003974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800398c:	f7ff f8f6 	bl	8002b7c <HAL_PWREx_GetVoltageRange>
 8003990:	6178      	str	r0, [r7, #20]
 8003992:	e014      	b.n	80039be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003994:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6593      	str	r3, [r2, #88]	; 0x58
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039ac:	f7ff f8e6 	bl	8002b7c <HAL_PWREx_GetVoltageRange>
 80039b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d10b      	bne.n	80039de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d913      	bls.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2ba0      	cmp	r3, #160	; 0xa0
 80039d0:	d902      	bls.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039d2:	2302      	movs	r3, #2
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	e00d      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039d8:	2301      	movs	r3, #1
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	e00a      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b7f      	cmp	r3, #127	; 0x7f
 80039e2:	d902      	bls.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80039e4:	2302      	movs	r3, #2
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e004      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b70      	cmp	r3, #112	; 0x70
 80039ee:	d101      	bne.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 020f 	bic.w	r2, r3, #15
 80039fc:	4909      	ldr	r1, [pc, #36]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d001      	beq.n	8003a16 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40022000 	.word	0x40022000

08003a28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d00b      	beq.n	8003a56 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d825      	bhi.n	8003a90 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d008      	beq.n	8003a5c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d11f      	bne.n	8003a90 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a52:	613b      	str	r3, [r7, #16]
    break;
 8003a54:	e01f      	b.n	8003a96 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003a56:	4b25      	ldr	r3, [pc, #148]	; (8003aec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a58:	613b      	str	r3, [r7, #16]
    break;
 8003a5a:	e01c      	b.n	8003a96 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a68:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e005      	b.n	8003a84 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	613b      	str	r3, [r7, #16]
    break;
 8003a8e:	e002      	b.n	8003a96 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
    break;
 8003a94:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a96:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	fb03 f202 	mul.w	r2, r3, r2
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aba:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	0e5b      	lsrs	r3, r3, #25
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003ad6:	683b      	ldr	r3, [r7, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	007a1200 	.word	0x007a1200
 8003af0:	08005e20 	.word	0x08005e20

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003afc:	2300      	movs	r3, #0
 8003afe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b00:	2300      	movs	r3, #0
 8003b02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d040      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d02a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d825      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b1c:	2b60      	cmp	r3, #96	; 0x60
 8003b1e:	d026      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b20:	2b60      	cmp	r3, #96	; 0x60
 8003b22:	d821      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d006      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d81d      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d010      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b34:	e018      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b36:	4b89      	ldr	r3, [pc, #548]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a88      	ldr	r2, [pc, #544]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b42:	e015      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fb02 	bl	8004154 <RCCEx_PLLSAI1_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b54:	e00c      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3320      	adds	r3, #32
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fbed 	bl	800433c <RCCEx_PLLSAI2_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b66:	e003      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	74fb      	strb	r3, [r7, #19]
      break;
 8003b6c:	e000      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b76:	4b79      	ldr	r3, [pc, #484]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b7c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b84:	4975      	ldr	r1, [pc, #468]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b8c:	e001      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d047      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba6:	d030      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bac:	d82a      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb2:	d02a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb8:	d824      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc4:	d81e      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d010      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bd0:	e018      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bd2:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4a61      	ldr	r2, [pc, #388]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bde:	e015      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fab4 	bl	8004154 <RCCEx_PLLSAI1_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bf0:	e00c      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3320      	adds	r3, #32
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fb9f 	bl	800433c <RCCEx_PLLSAI2_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c02:	e003      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	74fb      	strb	r3, [r7, #19]
      break;
 8003c08:	e000      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10b      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c12:	4b52      	ldr	r3, [pc, #328]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	494e      	ldr	r1, [pc, #312]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c28:	e001      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2a:	7cfb      	ldrb	r3, [r7, #19]
 8003c2c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 809f 	beq.w	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c40:	4b46      	ldr	r3, [pc, #280]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	4a40      	ldr	r2, [pc, #256]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6593      	str	r3, [r2, #88]	; 0x58
 8003c62:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c72:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3a      	ldr	r2, [pc, #232]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c7e:	f7fd fa37 	bl	80010f0 <HAL_GetTick>
 8003c82:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c84:	e009      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c86:	f7fd fa33 	bl	80010f0 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d902      	bls.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	74fb      	strb	r3, [r7, #19]
        break;
 8003c98:	e005      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c9a:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ef      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d15b      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cac:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01f      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d019      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cca:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd6:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce6:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d016      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fd f9f2 	bl	80010f0 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7fd f9ee 	bl	80010f0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d902      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	74fb      	strb	r3, [r7, #19]
            break;
 8003d26:	e006      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ec      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10c      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	4903      	ldr	r1, [pc, #12]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d54:	e008      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d56:	7cfb      	ldrb	r3, [r7, #19]
 8003d58:	74bb      	strb	r3, [r7, #18]
 8003d5a:	e005      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d68:	7c7b      	ldrb	r3, [r7, #17]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6e:	4ba0      	ldr	r3, [pc, #640]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	4a9f      	ldr	r2, [pc, #636]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d86:	4b9a      	ldr	r3, [pc, #616]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f023 0203 	bic.w	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	4996      	ldr	r1, [pc, #600]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da8:	4b91      	ldr	r3, [pc, #580]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f023 020c 	bic.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	498e      	ldr	r1, [pc, #568]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dca:	4b89      	ldr	r3, [pc, #548]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	4985      	ldr	r1, [pc, #532]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dec:	4b80      	ldr	r3, [pc, #512]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfa:	497d      	ldr	r1, [pc, #500]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e0e:	4b78      	ldr	r3, [pc, #480]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1c:	4974      	ldr	r1, [pc, #464]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e30:	4b6f      	ldr	r3, [pc, #444]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3e:	496c      	ldr	r1, [pc, #432]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e52:	4b67      	ldr	r3, [pc, #412]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e60:	4963      	ldr	r1, [pc, #396]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e74:	4b5e      	ldr	r3, [pc, #376]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e82:	495b      	ldr	r1, [pc, #364]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e96:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	4952      	ldr	r1, [pc, #328]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eb8:	4b4d      	ldr	r3, [pc, #308]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	494a      	ldr	r1, [pc, #296]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eda:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	4941      	ldr	r1, [pc, #260]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003efc:	4b3c      	ldr	r3, [pc, #240]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f02:	f023 0203 	bic.w	r2, r3, #3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	4939      	ldr	r1, [pc, #228]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d028      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f1e:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2c:	4930      	ldr	r1, [pc, #192]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f3c:	d106      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4a2b      	ldr	r2, [pc, #172]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f48:	60d3      	str	r3, [r2, #12]
 8003f4a:	e011      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f8f9 	bl	8004154 <RCCEx_PLLSAI1_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d04d      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f84:	d108      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f8c:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f96:	e012      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9e:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fb6:	490e      	ldr	r1, [pc, #56]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fd2:	60d3      	str	r3, [r2, #12]
 8003fd4:	e020      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fde:	d109      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a02      	ldr	r2, [pc, #8]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fea:	60d3      	str	r3, [r2, #12]
 8003fec:	e014      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	2101      	movs	r1, #1
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f8a5 	bl	8004154 <RCCEx_PLLSAI1_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d028      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004024:	4b4a      	ldr	r3, [pc, #296]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004032:	4947      	ldr	r1, [pc, #284]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800403e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004042:	d106      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004044:	4b42      	ldr	r3, [pc, #264]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a41      	ldr	r2, [pc, #260]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800404a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404e:	60d3      	str	r3, [r2, #12]
 8004050:	e011      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004056:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800405a:	d10c      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f876 	bl	8004154 <RCCEx_PLLSAI1_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406c:	7cfb      	ldrb	r3, [r7, #19]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01e      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004082:	4b33      	ldr	r3, [pc, #204]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004092:	492f      	ldr	r1, [pc, #188]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f851 	bl	8004154 <RCCEx_PLLSAI1_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040cc:	4b20      	ldr	r3, [pc, #128]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d2:	f023 0204 	bic.w	r2, r3, #4
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040dc:	491c      	ldr	r1, [pc, #112]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040f6:	f023 0218 	bic.w	r2, r3, #24
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	4913      	ldr	r1, [pc, #76]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d017      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004114:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800411a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004124:	490a      	ldr	r1, [pc, #40]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a04      	ldr	r2, [pc, #16]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004142:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004144:	7cbb      	ldrb	r3, [r7, #18]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000

08004154 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004162:	4b72      	ldr	r3, [pc, #456]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800416e:	4b6f      	ldr	r3, [pc, #444]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f003 0203 	and.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d103      	bne.n	8004186 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
       ||
 8004182:	2b00      	cmp	r3, #0
 8004184:	d142      	bne.n	800420c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	e03f      	b.n	800420c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d018      	beq.n	80041c6 <RCCEx_PLLSAI1_Config+0x72>
 8004194:	2b03      	cmp	r3, #3
 8004196:	d825      	bhi.n	80041e4 <RCCEx_PLLSAI1_Config+0x90>
 8004198:	2b01      	cmp	r3, #1
 800419a:	d002      	beq.n	80041a2 <RCCEx_PLLSAI1_Config+0x4e>
 800419c:	2b02      	cmp	r3, #2
 800419e:	d009      	beq.n	80041b4 <RCCEx_PLLSAI1_Config+0x60>
 80041a0:	e020      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041a2:	4b62      	ldr	r3, [pc, #392]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d11d      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b2:	e01a      	b.n	80041ea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041b4:	4b5d      	ldr	r3, [pc, #372]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e013      	b.n	80041ee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041c6:	4b59      	ldr	r3, [pc, #356]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041d2:	4b56      	ldr	r3, [pc, #344]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041e2:	e006      	b.n	80041f2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      break;
 80041e8:	e004      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80041f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80041fa:	4b4c      	ldr	r3, [pc, #304]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4949      	ldr	r1, [pc, #292]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004208:	4313      	orrs	r3, r2
 800420a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 8086 	bne.w	8004320 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004214:	4b45      	ldr	r3, [pc, #276]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a44      	ldr	r2, [pc, #272]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 800421a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800421e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004220:	f7fc ff66 	bl	80010f0 <HAL_GetTick>
 8004224:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004226:	e009      	b.n	800423c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004228:	f7fc ff62 	bl	80010f0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d902      	bls.n	800423c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	73fb      	strb	r3, [r7, #15]
        break;
 800423a:	e005      	b.n	8004248 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800423c:	4b3b      	ldr	r3, [pc, #236]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ef      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d168      	bne.n	8004320 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d113      	bne.n	800427c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004254:	4b35      	ldr	r3, [pc, #212]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	4b35      	ldr	r3, [pc, #212]	; (8004330 <RCCEx_PLLSAI1_Config+0x1dc>)
 800425a:	4013      	ands	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6892      	ldr	r2, [r2, #8]
 8004260:	0211      	lsls	r1, r2, #8
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68d2      	ldr	r2, [r2, #12]
 8004266:	06d2      	lsls	r2, r2, #27
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6852      	ldr	r2, [r2, #4]
 800426e:	3a01      	subs	r2, #1
 8004270:	0112      	lsls	r2, r2, #4
 8004272:	430a      	orrs	r2, r1
 8004274:	492d      	ldr	r1, [pc, #180]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	610b      	str	r3, [r1, #16]
 800427a:	e02d      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d115      	bne.n	80042ae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004282:	4b2a      	ldr	r3, [pc, #168]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	0211      	lsls	r1, r2, #8
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6912      	ldr	r2, [r2, #16]
 8004294:	0852      	lsrs	r2, r2, #1
 8004296:	3a01      	subs	r2, #1
 8004298:	0552      	lsls	r2, r2, #21
 800429a:	4311      	orrs	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6852      	ldr	r2, [r2, #4]
 80042a0:	3a01      	subs	r2, #1
 80042a2:	0112      	lsls	r2, r2, #4
 80042a4:	430a      	orrs	r2, r1
 80042a6:	4921      	ldr	r1, [pc, #132]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	610b      	str	r3, [r1, #16]
 80042ac:	e014      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ae:	4b1f      	ldr	r3, [pc, #124]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	4b21      	ldr	r3, [pc, #132]	; (8004338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6892      	ldr	r2, [r2, #8]
 80042ba:	0211      	lsls	r1, r2, #8
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6952      	ldr	r2, [r2, #20]
 80042c0:	0852      	lsrs	r2, r2, #1
 80042c2:	3a01      	subs	r2, #1
 80042c4:	0652      	lsls	r2, r2, #25
 80042c6:	4311      	orrs	r1, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6852      	ldr	r2, [r2, #4]
 80042cc:	3a01      	subs	r2, #1
 80042ce:	0112      	lsls	r2, r2, #4
 80042d0:	430a      	orrs	r2, r1
 80042d2:	4916      	ldr	r1, [pc, #88]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a13      	ldr	r2, [pc, #76]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fc ff04 	bl	80010f0 <HAL_GetTick>
 80042e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ea:	e009      	b.n	8004300 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042ec:	f7fc ff00 	bl	80010f0 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d902      	bls.n	8004300 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	73fb      	strb	r3, [r7, #15]
          break;
 80042fe:	e005      	b.n	800430c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ef      	beq.n	80042ec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	4904      	ldr	r1, [pc, #16]	; (800432c <RCCEx_PLLSAI1_Config+0x1d8>)
 800431c:	4313      	orrs	r3, r2
 800431e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	07ff800f 	.word	0x07ff800f
 8004334:	ff9f800f 	.word	0xff9f800f
 8004338:	f9ff800f 	.word	0xf9ff800f

0800433c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800434a:	4b72      	ldr	r3, [pc, #456]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00e      	beq.n	8004374 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004356:	4b6f      	ldr	r3, [pc, #444]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0203 	and.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d103      	bne.n	800436e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
       ||
 800436a:	2b00      	cmp	r3, #0
 800436c:	d142      	bne.n	80043f4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e03f      	b.n	80043f4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d018      	beq.n	80043ae <RCCEx_PLLSAI2_Config+0x72>
 800437c:	2b03      	cmp	r3, #3
 800437e:	d825      	bhi.n	80043cc <RCCEx_PLLSAI2_Config+0x90>
 8004380:	2b01      	cmp	r3, #1
 8004382:	d002      	beq.n	800438a <RCCEx_PLLSAI2_Config+0x4e>
 8004384:	2b02      	cmp	r3, #2
 8004386:	d009      	beq.n	800439c <RCCEx_PLLSAI2_Config+0x60>
 8004388:	e020      	b.n	80043cc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800438a:	4b62      	ldr	r3, [pc, #392]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11d      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439a:	e01a      	b.n	80043d2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800439c:	4b5d      	ldr	r3, [pc, #372]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d116      	bne.n	80043d6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ac:	e013      	b.n	80043d6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ae:	4b59      	ldr	r3, [pc, #356]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ba:	4b56      	ldr	r3, [pc, #344]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ca:	e006      	b.n	80043da <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e004      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80043da:	bf00      	nop
    }

    if(status == HAL_OK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d108      	bne.n	80043f4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80043e2:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f023 0203 	bic.w	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4949      	ldr	r1, [pc, #292]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 8086 	bne.w	8004508 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043fc:	4b45      	ldr	r3, [pc, #276]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a44      	ldr	r2, [pc, #272]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004408:	f7fc fe72 	bl	80010f0 <HAL_GetTick>
 800440c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800440e:	e009      	b.n	8004424 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004410:	f7fc fe6e 	bl	80010f0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d902      	bls.n	8004424 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	73fb      	strb	r3, [r7, #15]
        break;
 8004422:	e005      	b.n	8004430 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004424:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ef      	bne.n	8004410 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d168      	bne.n	8004508 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d113      	bne.n	8004464 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	4b35      	ldr	r3, [pc, #212]	; (8004518 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004442:	4013      	ands	r3, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6892      	ldr	r2, [r2, #8]
 8004448:	0211      	lsls	r1, r2, #8
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68d2      	ldr	r2, [r2, #12]
 800444e:	06d2      	lsls	r2, r2, #27
 8004450:	4311      	orrs	r1, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6852      	ldr	r2, [r2, #4]
 8004456:	3a01      	subs	r2, #1
 8004458:	0112      	lsls	r2, r2, #4
 800445a:	430a      	orrs	r2, r1
 800445c:	492d      	ldr	r1, [pc, #180]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 800445e:	4313      	orrs	r3, r2
 8004460:	614b      	str	r3, [r1, #20]
 8004462:	e02d      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d115      	bne.n	8004496 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800446a:	4b2a      	ldr	r3, [pc, #168]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	4b2b      	ldr	r3, [pc, #172]	; (800451c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6892      	ldr	r2, [r2, #8]
 8004476:	0211      	lsls	r1, r2, #8
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6912      	ldr	r2, [r2, #16]
 800447c:	0852      	lsrs	r2, r2, #1
 800447e:	3a01      	subs	r2, #1
 8004480:	0552      	lsls	r2, r2, #21
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6852      	ldr	r2, [r2, #4]
 8004488:	3a01      	subs	r2, #1
 800448a:	0112      	lsls	r2, r2, #4
 800448c:	430a      	orrs	r2, r1
 800448e:	4921      	ldr	r1, [pc, #132]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	614b      	str	r3, [r1, #20]
 8004494:	e014      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004496:	4b1f      	ldr	r3, [pc, #124]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	4b21      	ldr	r3, [pc, #132]	; (8004520 <RCCEx_PLLSAI2_Config+0x1e4>)
 800449c:	4013      	ands	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6892      	ldr	r2, [r2, #8]
 80044a2:	0211      	lsls	r1, r2, #8
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6952      	ldr	r2, [r2, #20]
 80044a8:	0852      	lsrs	r2, r2, #1
 80044aa:	3a01      	subs	r2, #1
 80044ac:	0652      	lsls	r2, r2, #25
 80044ae:	4311      	orrs	r1, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6852      	ldr	r2, [r2, #4]
 80044b4:	3a01      	subs	r2, #1
 80044b6:	0112      	lsls	r2, r2, #4
 80044b8:	430a      	orrs	r2, r1
 80044ba:	4916      	ldr	r1, [pc, #88]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044c0:	4b14      	ldr	r3, [pc, #80]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a13      	ldr	r2, [pc, #76]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fc fe10 	bl	80010f0 <HAL_GetTick>
 80044d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044d2:	e009      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044d4:	f7fc fe0c 	bl	80010f0 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d902      	bls.n	80044e8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	73fb      	strb	r3, [r7, #15]
          break;
 80044e6:	e005      	b.n	80044f4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	4904      	ldr	r1, [pc, #16]	; (8004514 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
 8004518:	07ff800f 	.word	0x07ff800f
 800451c:	ff9f800f 	.word	0xff9f800f
 8004520:	f9ff800f 	.word	0xf9ff800f

08004524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e095      	b.n	8004662 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d108      	bne.n	8004550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004546:	d009      	beq.n	800455c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	61da      	str	r2, [r3, #28]
 800454e:	e005      	b.n	800455c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fc fbf4 	bl	8000d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004592:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800459c:	d902      	bls.n	80045a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e002      	b.n	80045aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045b2:	d007      	beq.n	80045c4 <HAL_SPI_Init+0xa0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045bc:	d002      	beq.n	80045c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	ea42 0103 	orr.w	r1, r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	f003 0204 	and.w	r2, r3, #4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004640:	ea42 0103 	orr.w	r1, r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e049      	b.n	8004710 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7fc fba9 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f000 f8ff 	bl	80048ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_TIM_ConfigClockSource+0x1c>
 8004730:	2302      	movs	r3, #2
 8004732:	e0b6      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x18a>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004752:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800475e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004770:	d03e      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0xd8>
 8004772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004776:	f200 8087 	bhi.w	8004888 <HAL_TIM_ConfigClockSource+0x170>
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	f000 8086 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x176>
 8004782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004786:	d87f      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x170>
 8004788:	2b70      	cmp	r3, #112	; 0x70
 800478a:	d01a      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0xaa>
 800478c:	2b70      	cmp	r3, #112	; 0x70
 800478e:	d87b      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x170>
 8004790:	2b60      	cmp	r3, #96	; 0x60
 8004792:	d050      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x11e>
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d877      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x170>
 8004798:	2b50      	cmp	r3, #80	; 0x50
 800479a:	d03c      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0xfe>
 800479c:	2b50      	cmp	r3, #80	; 0x50
 800479e:	d873      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x170>
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d058      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x13e>
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d86f      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x170>
 80047a8:	2b30      	cmp	r3, #48	; 0x30
 80047aa:	d064      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x15e>
 80047ac:	2b30      	cmp	r3, #48	; 0x30
 80047ae:	d86b      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x170>
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d060      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x15e>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d867      	bhi.n	8004888 <HAL_TIM_ConfigClockSource+0x170>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d05c      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x15e>
 80047bc:	2b10      	cmp	r3, #16
 80047be:	d05a      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x15e>
 80047c0:	e062      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6899      	ldr	r1, [r3, #8]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f000 f97f 	bl	8004ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	609a      	str	r2, [r3, #8]
      break;
 80047ee:	e04f      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6899      	ldr	r1, [r3, #8]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f000 f968 	bl	8004ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004812:	609a      	str	r2, [r3, #8]
      break;
 8004814:	e03c      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	461a      	mov	r2, r3
 8004824:	f000 f8dc 	bl	80049e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2150      	movs	r1, #80	; 0x50
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f935 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004834:	e02c      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6859      	ldr	r1, [r3, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	461a      	mov	r2, r3
 8004844:	f000 f8fb 	bl	8004a3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2160      	movs	r1, #96	; 0x60
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f925 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004854:	e01c      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	461a      	mov	r2, r3
 8004864:	f000 f8bc 	bl	80049e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2140      	movs	r1, #64	; 0x40
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f915 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004874:	e00c      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f000 f90c 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004886:	e003      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
      break;
 800488c:	e000      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800488e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a40      	ldr	r2, [pc, #256]	; (80049c0 <TIM_Base_SetConfig+0x114>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d013      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ca:	d00f      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3d      	ldr	r2, [pc, #244]	; (80049c4 <TIM_Base_SetConfig+0x118>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00b      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3c      	ldr	r2, [pc, #240]	; (80049c8 <TIM_Base_SetConfig+0x11c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3b      	ldr	r2, [pc, #236]	; (80049cc <TIM_Base_SetConfig+0x120>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3a      	ldr	r2, [pc, #232]	; (80049d0 <TIM_Base_SetConfig+0x124>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d108      	bne.n	80048fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <TIM_Base_SetConfig+0x114>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490c:	d01b      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <TIM_Base_SetConfig+0x118>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d017      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <TIM_Base_SetConfig+0x11c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <TIM_Base_SetConfig+0x120>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a29      	ldr	r2, [pc, #164]	; (80049d0 <TIM_Base_SetConfig+0x124>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <TIM_Base_SetConfig+0x128>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <TIM_Base_SetConfig+0x12c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a26      	ldr	r2, [pc, #152]	; (80049dc <TIM_Base_SetConfig+0x130>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00f      	beq.n	80049a4 <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <TIM_Base_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <TIM_Base_SetConfig+0x128>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_Base_SetConfig+0xf8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <TIM_Base_SetConfig+0x12c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_Base_SetConfig+0xf8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a0f      	ldr	r2, [pc, #60]	; (80049dc <TIM_Base_SetConfig+0x130>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d103      	bne.n	80049ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	615a      	str	r2, [r3, #20]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	40013400 	.word	0x40013400
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800

080049e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0201 	bic.w	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 030a 	bic.w	r3, r3, #10
 8004a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b087      	sub	sp, #28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0210 	bic.w	r2, r3, #16
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	031b      	lsls	r3, r3, #12
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f043 0307 	orr.w	r3, r3, #7
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	609a      	str	r2, [r3, #8]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e068      	b.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2e      	ldr	r2, [pc, #184]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d018      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d10c      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40014000 	.word	0x40014000

08004c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e042      	b.n	8004cbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fb ffe5 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2224      	movs	r2, #36	; 0x24
 8004c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f82c 	bl	8004cc4 <UART_SetConfig>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e022      	b.n	8004cbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fb1c 	bl	80052bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fba3 	bl	8005400 <UART_CheckIdleState>
 8004cba:	4603      	mov	r3, r0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc8:	b08c      	sub	sp, #48	; 0x30
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4baa      	ldr	r3, [pc, #680]	; (8004f9c <UART_SetConfig+0x2d8>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a9f      	ldr	r2, [pc, #636]	; (8004fa0 <UART_SetConfig+0x2dc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d004      	beq.n	8004d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	f023 010f 	bic.w	r1, r3, #15
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a90      	ldr	r2, [pc, #576]	; (8004fa4 <UART_SetConfig+0x2e0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d125      	bne.n	8004db4 <UART_SetConfig+0xf0>
 8004d68:	4b8f      	ldr	r3, [pc, #572]	; (8004fa8 <UART_SetConfig+0x2e4>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d81a      	bhi.n	8004dac <UART_SetConfig+0xe8>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <UART_SetConfig+0xb8>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004da5 	.word	0x08004da5
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d92:	e116      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9a:	e112      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da2:	e10e      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004daa:	e10a      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db2:	e106      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a7c      	ldr	r2, [pc, #496]	; (8004fac <UART_SetConfig+0x2e8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d138      	bne.n	8004e30 <UART_SetConfig+0x16c>
 8004dbe:	4b7a      	ldr	r3, [pc, #488]	; (8004fa8 <UART_SetConfig+0x2e4>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d82d      	bhi.n	8004e28 <UART_SetConfig+0x164>
 8004dcc:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0x110>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004e29 	.word	0x08004e29
 8004ddc:	08004e29 	.word	0x08004e29
 8004de0:	08004e29 	.word	0x08004e29
 8004de4:	08004e19 	.word	0x08004e19
 8004de8:	08004e29 	.word	0x08004e29
 8004dec:	08004e29 	.word	0x08004e29
 8004df0:	08004e29 	.word	0x08004e29
 8004df4:	08004e11 	.word	0x08004e11
 8004df8:	08004e29 	.word	0x08004e29
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e21 	.word	0x08004e21
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	e0d8      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e16:	e0d4      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e1e:	e0d0      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e26:	e0cc      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2e:	e0c8      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a5e      	ldr	r2, [pc, #376]	; (8004fb0 <UART_SetConfig+0x2ec>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d125      	bne.n	8004e86 <UART_SetConfig+0x1c2>
 8004e3a:	4b5b      	ldr	r3, [pc, #364]	; (8004fa8 <UART_SetConfig+0x2e4>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d016      	beq.n	8004e76 <UART_SetConfig+0x1b2>
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d818      	bhi.n	8004e7e <UART_SetConfig+0x1ba>
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d00a      	beq.n	8004e66 <UART_SetConfig+0x1a2>
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d814      	bhi.n	8004e7e <UART_SetConfig+0x1ba>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <UART_SetConfig+0x19a>
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d008      	beq.n	8004e6e <UART_SetConfig+0x1aa>
 8004e5c:	e00f      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e64:	e0ad      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e66:	2302      	movs	r3, #2
 8004e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e6c:	e0a9      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e6e:	2304      	movs	r3, #4
 8004e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e74:	e0a5      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e76:	2308      	movs	r3, #8
 8004e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e7c:	e0a1      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e7e:	2310      	movs	r3, #16
 8004e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e84:	e09d      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4a      	ldr	r2, [pc, #296]	; (8004fb4 <UART_SetConfig+0x2f0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d125      	bne.n	8004edc <UART_SetConfig+0x218>
 8004e90:	4b45      	ldr	r3, [pc, #276]	; (8004fa8 <UART_SetConfig+0x2e4>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e9c:	d016      	beq.n	8004ecc <UART_SetConfig+0x208>
 8004e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004ea0:	d818      	bhi.n	8004ed4 <UART_SetConfig+0x210>
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d00a      	beq.n	8004ebc <UART_SetConfig+0x1f8>
 8004ea6:	2b80      	cmp	r3, #128	; 0x80
 8004ea8:	d814      	bhi.n	8004ed4 <UART_SetConfig+0x210>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <UART_SetConfig+0x1f0>
 8004eae:	2b40      	cmp	r3, #64	; 0x40
 8004eb0:	d008      	beq.n	8004ec4 <UART_SetConfig+0x200>
 8004eb2:	e00f      	b.n	8004ed4 <UART_SetConfig+0x210>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eba:	e082      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ec2:	e07e      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eca:	e07a      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004ecc:	2308      	movs	r3, #8
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ed2:	e076      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eda:	e072      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a35      	ldr	r2, [pc, #212]	; (8004fb8 <UART_SetConfig+0x2f4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d12a      	bne.n	8004f3c <UART_SetConfig+0x278>
 8004ee6:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <UART_SetConfig+0x2e4>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef4:	d01a      	beq.n	8004f2c <UART_SetConfig+0x268>
 8004ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004efa:	d81b      	bhi.n	8004f34 <UART_SetConfig+0x270>
 8004efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f00:	d00c      	beq.n	8004f1c <UART_SetConfig+0x258>
 8004f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f06:	d815      	bhi.n	8004f34 <UART_SetConfig+0x270>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <UART_SetConfig+0x250>
 8004f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f10:	d008      	beq.n	8004f24 <UART_SetConfig+0x260>
 8004f12:	e00f      	b.n	8004f34 <UART_SetConfig+0x270>
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1a:	e052      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f22:	e04e      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f24:	2304      	movs	r3, #4
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f2a:	e04a      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f2c:	2308      	movs	r3, #8
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f32:	e046      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f34:	2310      	movs	r3, #16
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3a:	e042      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <UART_SetConfig+0x2dc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d13a      	bne.n	8004fbc <UART_SetConfig+0x2f8>
 8004f46:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <UART_SetConfig+0x2e4>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f54:	d01a      	beq.n	8004f8c <UART_SetConfig+0x2c8>
 8004f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f5a:	d81b      	bhi.n	8004f94 <UART_SetConfig+0x2d0>
 8004f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f60:	d00c      	beq.n	8004f7c <UART_SetConfig+0x2b8>
 8004f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f66:	d815      	bhi.n	8004f94 <UART_SetConfig+0x2d0>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <UART_SetConfig+0x2b0>
 8004f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f70:	d008      	beq.n	8004f84 <UART_SetConfig+0x2c0>
 8004f72:	e00f      	b.n	8004f94 <UART_SetConfig+0x2d0>
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f7a:	e022      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f82:	e01e      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f84:	2304      	movs	r3, #4
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8a:	e01a      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f92:	e016      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9a:	e012      	b.n	8004fc2 <UART_SetConfig+0x2fe>
 8004f9c:	cfff69f3 	.word	0xcfff69f3
 8004fa0:	40008000 	.word	0x40008000
 8004fa4:	40013800 	.word	0x40013800
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40004400 	.word	0x40004400
 8004fb0:	40004800 	.word	0x40004800
 8004fb4:	40004c00 	.word	0x40004c00
 8004fb8:	40005000 	.word	0x40005000
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4aae      	ldr	r2, [pc, #696]	; (8005280 <UART_SetConfig+0x5bc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	f040 8097 	bne.w	80050fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d823      	bhi.n	800501e <UART_SetConfig+0x35a>
 8004fd6:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <UART_SetConfig+0x318>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08005001 	.word	0x08005001
 8004fe0:	0800501f 	.word	0x0800501f
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	0800501f 	.word	0x0800501f
 8004fec:	0800500f 	.word	0x0800500f
 8004ff0:	0800501f 	.word	0x0800501f
 8004ff4:	0800501f 	.word	0x0800501f
 8004ff8:	0800501f 	.word	0x0800501f
 8004ffc:	08005017 	.word	0x08005017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005000:	f7fe fc8c 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8005004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005006:	e010      	b.n	800502a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005008:	4b9e      	ldr	r3, [pc, #632]	; (8005284 <UART_SetConfig+0x5c0>)
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800500c:	e00d      	b.n	800502a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500e:	f7fe fbed 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 8005012:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005014:	e009      	b.n	800502a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800501c:	e005      	b.n	800502a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005028:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8130 	beq.w	8005292 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	4a94      	ldr	r2, [pc, #592]	; (8005288 <UART_SetConfig+0x5c4>)
 8005038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800503c:	461a      	mov	r2, r3
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	fbb3 f3f2 	udiv	r3, r3, r2
 8005044:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	429a      	cmp	r2, r3
 8005054:	d305      	bcc.n	8005062 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	429a      	cmp	r2, r3
 8005060:	d903      	bls.n	800506a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005068:	e113      	b.n	8005292 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	2200      	movs	r2, #0
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	60fa      	str	r2, [r7, #12]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	4a84      	ldr	r2, [pc, #528]	; (8005288 <UART_SetConfig+0x5c4>)
 8005078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800507c:	b29b      	uxth	r3, r3
 800507e:	2200      	movs	r2, #0
 8005080:	603b      	str	r3, [r7, #0]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800508c:	f7fb f8b6 	bl	80001fc <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	020b      	lsls	r3, r1, #8
 80050a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050a6:	0202      	lsls	r2, r0, #8
 80050a8:	6979      	ldr	r1, [r7, #20]
 80050aa:	6849      	ldr	r1, [r1, #4]
 80050ac:	0849      	lsrs	r1, r1, #1
 80050ae:	2000      	movs	r0, #0
 80050b0:	460c      	mov	r4, r1
 80050b2:	4605      	mov	r5, r0
 80050b4:	eb12 0804 	adds.w	r8, r2, r4
 80050b8:	eb43 0905 	adc.w	r9, r3, r5
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	469a      	mov	sl, r3
 80050c4:	4693      	mov	fp, r2
 80050c6:	4652      	mov	r2, sl
 80050c8:	465b      	mov	r3, fp
 80050ca:	4640      	mov	r0, r8
 80050cc:	4649      	mov	r1, r9
 80050ce:	f7fb f895 	bl	80001fc <__aeabi_uldivmod>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4613      	mov	r3, r2
 80050d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e0:	d308      	bcc.n	80050f4 <UART_SetConfig+0x430>
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e8:	d204      	bcs.n	80050f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a3a      	ldr	r2, [r7, #32]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	e0ce      	b.n	8005292 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050fa:	e0ca      	b.n	8005292 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005104:	d166      	bne.n	80051d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005106:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800510a:	2b08      	cmp	r3, #8
 800510c:	d827      	bhi.n	800515e <UART_SetConfig+0x49a>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0x450>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005139 	.word	0x08005139
 8005118:	08005141 	.word	0x08005141
 800511c:	08005149 	.word	0x08005149
 8005120:	0800515f 	.word	0x0800515f
 8005124:	0800514f 	.word	0x0800514f
 8005128:	0800515f 	.word	0x0800515f
 800512c:	0800515f 	.word	0x0800515f
 8005130:	0800515f 	.word	0x0800515f
 8005134:	08005157 	.word	0x08005157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005138:	f7fe fbf0 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 800513c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800513e:	e014      	b.n	800516a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005140:	f7fe fc02 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 8005144:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005146:	e010      	b.n	800516a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005148:	4b4e      	ldr	r3, [pc, #312]	; (8005284 <UART_SetConfig+0x5c0>)
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800514c:	e00d      	b.n	800516a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514e:	f7fe fb4d 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 8005152:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005154:	e009      	b.n	800516a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800515c:	e005      	b.n	800516a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005168:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8090 	beq.w	8005292 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	4a44      	ldr	r2, [pc, #272]	; (8005288 <UART_SetConfig+0x5c4>)
 8005178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800517c:	461a      	mov	r2, r3
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	fbb3 f3f2 	udiv	r3, r3, r2
 8005184:	005a      	lsls	r2, r3, #1
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	441a      	add	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2b0f      	cmp	r3, #15
 800519c:	d916      	bls.n	80051cc <UART_SetConfig+0x508>
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a4:	d212      	bcs.n	80051cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f023 030f 	bic.w	r3, r3, #15
 80051ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	8bfb      	ldrh	r3, [r7, #30]
 80051be:	4313      	orrs	r3, r2
 80051c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	8bfa      	ldrh	r2, [r7, #30]
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	e062      	b.n	8005292 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051d2:	e05e      	b.n	8005292 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d828      	bhi.n	800522e <UART_SetConfig+0x56a>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x520>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	0800521f 	.word	0x0800521f
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800522f 	.word	0x0800522f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7fe fb88 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 800520c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800520e:	e014      	b.n	800523a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7fe fb9a 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 8005214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005216:	e010      	b.n	800523a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <UART_SetConfig+0x5c0>)
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800521c:	e00d      	b.n	800523a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fe fae5 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 8005222:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005224:	e009      	b.n	800523a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800522c:	e005      	b.n	800523a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005238:	bf00      	nop
    }

    if (pclk != 0U)
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	2b00      	cmp	r3, #0
 800523e:	d028      	beq.n	8005292 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	4a10      	ldr	r2, [pc, #64]	; (8005288 <UART_SetConfig+0x5c4>)
 8005246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800524a:	461a      	mov	r2, r3
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	441a      	add	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	2b0f      	cmp	r3, #15
 8005268:	d910      	bls.n	800528c <UART_SetConfig+0x5c8>
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005270:	d20c      	bcs.n	800528c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	b29a      	uxth	r2, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60da      	str	r2, [r3, #12]
 800527c:	e009      	b.n	8005292 <UART_SetConfig+0x5ce>
 800527e:	bf00      	nop
 8005280:	40008000 	.word	0x40008000
 8005284:	00f42400 	.word	0x00f42400
 8005288:	08005e50 	.word	0x08005e50
      }
      else
      {
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2201      	movs	r2, #1
 8005296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2201      	movs	r2, #1
 800529e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2200      	movs	r2, #0
 80052a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2200      	movs	r2, #0
 80052ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80052ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	; 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080052bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01a      	beq.n	80053d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ba:	d10a      	bne.n	80053d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]
  }
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af02      	add	r7, sp, #8
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005410:	f7fb fe6e 	bl	80010f0 <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b08      	cmp	r3, #8
 8005422:	d10e      	bne.n	8005442 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f82f 	bl	8005496 <UART_WaitOnFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e025      	b.n	800548e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d10e      	bne.n	800546e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f819 	bl	8005496 <UART_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e00f      	b.n	800548e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b09c      	sub	sp, #112	; 0x70
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	4613      	mov	r3, r2
 80054a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a6:	e0a9      	b.n	80055fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ae:	f000 80a5 	beq.w	80055fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b2:	f7fb fe1d 	bl	80010f0 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80054c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d140      	bne.n	800554a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054dc:	667b      	str	r3, [r7, #100]	; 0x64
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e6      	bne.n	80054c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3308      	adds	r3, #8
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	663b      	str	r3, [r7, #96]	; 0x60
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3308      	adds	r3, #8
 8005518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800551a:	64ba      	str	r2, [r7, #72]	; 0x48
 800551c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e5      	bne.n	80054fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e069      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d051      	beq.n	80055fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005566:	d149      	bne.n	80055fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005570:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005586:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e6      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	613b      	str	r3, [r7, #16]
   return(result);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055c4:	623a      	str	r2, [r7, #32]
 80055c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e010      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69da      	ldr	r2, [r3, #28]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4013      	ands	r3, r2
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	429a      	cmp	r2, r3
 800560a:	bf0c      	ite	eq
 800560c:	2301      	moveq	r3, #1
 800560e:	2300      	movne	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	429a      	cmp	r2, r3
 8005618:	f43f af46 	beq.w	80054a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3770      	adds	r7, #112	; 0x70
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_UARTEx_DisableFifoMode+0x16>
 8005638:	2302      	movs	r3, #2
 800563a:	e027      	b.n	800568c <HAL_UARTEx_DisableFifoMode+0x66>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2224      	movs	r2, #36	; 0x24
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800566a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e02d      	b.n	800570c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	; 0x24
 80056bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f84f 	bl	8005790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e02d      	b.n	8005788 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	; 0x24
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f811 	bl	8005790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800579c:	2b00      	cmp	r3, #0
 800579e:	d108      	bne.n	80057b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057b0:	e031      	b.n	8005816 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057b2:	2308      	movs	r3, #8
 80057b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057b6:	2308      	movs	r3, #8
 80057b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	0e5b      	lsrs	r3, r3, #25
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	0f5b      	lsrs	r3, r3, #29
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057da:	7bbb      	ldrb	r3, [r7, #14]
 80057dc:	7b3a      	ldrb	r2, [r7, #12]
 80057de:	4911      	ldr	r1, [pc, #68]	; (8005824 <UARTEx_SetNbDataToProcess+0x94>)
 80057e0:	5c8a      	ldrb	r2, [r1, r2]
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057e6:	7b3a      	ldrb	r2, [r7, #12]
 80057e8:	490f      	ldr	r1, [pc, #60]	; (8005828 <UARTEx_SetNbDataToProcess+0x98>)
 80057ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	7b7a      	ldrb	r2, [r7, #13]
 80057fc:	4909      	ldr	r1, [pc, #36]	; (8005824 <UARTEx_SetNbDataToProcess+0x94>)
 80057fe:	5c8a      	ldrb	r2, [r1, r2]
 8005800:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005804:	7b7a      	ldrb	r2, [r7, #13]
 8005806:	4908      	ldr	r1, [pc, #32]	; (8005828 <UARTEx_SetNbDataToProcess+0x98>)
 8005808:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800580a:	fb93 f3f2 	sdiv	r3, r3, r2
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	08005e68 	.word	0x08005e68
 8005828:	08005e70 	.word	0x08005e70

0800582c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800582c:	b084      	sub	sp, #16
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	f107 001c 	add.w	r0, r7, #28
 800583a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa70 	bl	8005d30 <USB_CoreReset>
 8005850:	4603      	mov	r3, r0
 8005852:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
 8005866:	e005      	b.n	8005874 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005880:	b004      	add	sp, #16
 8005882:	4770      	bx	lr

08005884 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f023 0201 	bic.w	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d115      	bne.n	80058f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058d4:	2001      	movs	r0, #1
 80058d6:	f7fb fc17 	bl	8001108 <HAL_Delay>
      ms++;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fa17 	bl	8005d14 <USB_GetMode>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d01e      	beq.n	800592a <USB_SetCurrentMode+0x84>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b31      	cmp	r3, #49	; 0x31
 80058f0:	d9f0      	bls.n	80058d4 <USB_SetCurrentMode+0x2e>
 80058f2:	e01a      	b.n	800592a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d115      	bne.n	8005926 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005906:	2001      	movs	r0, #1
 8005908:	f7fb fbfe 	bl	8001108 <HAL_Delay>
      ms++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f9fe 	bl	8005d14 <USB_GetMode>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <USB_SetCurrentMode+0x84>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b31      	cmp	r3, #49	; 0x31
 8005922:	d9f0      	bls.n	8005906 <USB_SetCurrentMode+0x60>
 8005924:	e001      	b.n	800592a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e005      	b.n	8005936 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b32      	cmp	r3, #50	; 0x32
 800592e:	d101      	bne.n	8005934 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005940:	b084      	sub	sp, #16
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800594e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e009      	b.n	8005974 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3340      	adds	r3, #64	; 0x40
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3301      	adds	r3, #1
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b0e      	cmp	r3, #14
 8005978:	d9f2      	bls.n	8005960 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800597a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11c      	bne.n	80059ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800598e:	f043 0302 	orr.w	r3, r3, #2
 8005992:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e005      	b.n	80059c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059cc:	461a      	mov	r2, r3
 80059ce:	2300      	movs	r3, #0
 80059d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d8:	4619      	mov	r1, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e0:	461a      	mov	r2, r3
 80059e2:	680b      	ldr	r3, [r1, #0]
 80059e4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059e6:	2103      	movs	r1, #3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f959 	bl	8005ca0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059ee:	2110      	movs	r1, #16
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f8f1 	bl	8005bd8 <USB_FlushTxFifo>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f91d 	bl	8005c40 <USB_FlushRxFifo>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	461a      	mov	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	461a      	mov	r2, r3
 8005a24:	2300      	movs	r3, #0
 8005a26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2300      	movs	r3, #0
 8005a32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a34:	2300      	movs	r3, #0
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	e043      	b.n	8005ac2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a50:	d118      	bne.n	8005a84 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	461a      	mov	r2, r3
 8005a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	e013      	b.n	8005a96 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e008      	b.n	8005a96 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	461a      	mov	r2, r3
 8005a92:	2300      	movs	r3, #0
 8005a94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d3b7      	bcc.n	8005a3a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	e043      	b.n	8005b58 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae6:	d118      	bne.n	8005b1a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	461a      	mov	r2, r3
 8005afc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e013      	b.n	8005b2c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	461a      	mov	r2, r3
 8005b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	e008      	b.n	8005b2c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	461a      	mov	r2, r3
 8005b28:	2300      	movs	r3, #0
 8005b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	3301      	adds	r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d3b7      	bcc.n	8005ad0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f043 0210 	orr.w	r2, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <USB_DevInit+0x294>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f043 0208 	orr.w	r2, r3, #8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d107      	bne.n	8005bc2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bba:	f043 0304 	orr.w	r3, r3, #4
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bce:	b004      	add	sp, #16
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	803c3800 	.word	0x803c3800

08005bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <USB_FlushTxFifo+0x64>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d901      	bls.n	8005bf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e01b      	b.n	8005c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	daf2      	bge.n	8005be6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	019b      	lsls	r3, r3, #6
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4a08      	ldr	r2, [pc, #32]	; (8005c3c <USB_FlushTxFifo+0x64>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e006      	b.n	8005c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d0f0      	beq.n	8005c10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	00030d40 	.word	0x00030d40

08005c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <USB_FlushRxFifo+0x5c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e018      	b.n	8005c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	daf2      	bge.n	8005c4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2210      	movs	r2, #16
 8005c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <USB_FlushRxFifo+0x5c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e006      	b.n	8005c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d0f0      	beq.n	8005c70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	00030d40 	.word	0x00030d40

08005ca0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cec:	f023 0303 	bic.w	r3, r3, #3
 8005cf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d00:	f043 0302 	orr.w	r3, r3, #2
 8005d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0301 	and.w	r3, r3, #1
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <USB_CoreReset+0x64>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e01b      	b.n	8005d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	daf2      	bge.n	8005d3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <USB_CoreReset+0x64>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d901      	bls.n	8005d78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e006      	b.n	8005d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d0f0      	beq.n	8005d66 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	00030d40 	.word	0x00030d40

08005d98 <__libc_init_array>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	4d0d      	ldr	r5, [pc, #52]	; (8005dd0 <__libc_init_array+0x38>)
 8005d9c:	4c0d      	ldr	r4, [pc, #52]	; (8005dd4 <__libc_init_array+0x3c>)
 8005d9e:	1b64      	subs	r4, r4, r5
 8005da0:	10a4      	asrs	r4, r4, #2
 8005da2:	2600      	movs	r6, #0
 8005da4:	42a6      	cmp	r6, r4
 8005da6:	d109      	bne.n	8005dbc <__libc_init_array+0x24>
 8005da8:	4d0b      	ldr	r5, [pc, #44]	; (8005dd8 <__libc_init_array+0x40>)
 8005daa:	4c0c      	ldr	r4, [pc, #48]	; (8005ddc <__libc_init_array+0x44>)
 8005dac:	f000 f820 	bl	8005df0 <_init>
 8005db0:	1b64      	subs	r4, r4, r5
 8005db2:	10a4      	asrs	r4, r4, #2
 8005db4:	2600      	movs	r6, #0
 8005db6:	42a6      	cmp	r6, r4
 8005db8:	d105      	bne.n	8005dc6 <__libc_init_array+0x2e>
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc0:	4798      	blx	r3
 8005dc2:	3601      	adds	r6, #1
 8005dc4:	e7ee      	b.n	8005da4 <__libc_init_array+0xc>
 8005dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dca:	4798      	blx	r3
 8005dcc:	3601      	adds	r6, #1
 8005dce:	e7f2      	b.n	8005db6 <__libc_init_array+0x1e>
 8005dd0:	08005e80 	.word	0x08005e80
 8005dd4:	08005e80 	.word	0x08005e80
 8005dd8:	08005e80 	.word	0x08005e80
 8005ddc:	08005e84 	.word	0x08005e84

08005de0 <memset>:
 8005de0:	4402      	add	r2, r0
 8005de2:	4603      	mov	r3, r0
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d100      	bne.n	8005dea <memset+0xa>
 8005de8:	4770      	bx	lr
 8005dea:	f803 1b01 	strb.w	r1, [r3], #1
 8005dee:	e7f9      	b.n	8005de4 <memset+0x4>

08005df0 <_init>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	bf00      	nop
 8005df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df6:	bc08      	pop	{r3}
 8005df8:	469e      	mov	lr, r3
 8005dfa:	4770      	bx	lr

08005dfc <_fini>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr
